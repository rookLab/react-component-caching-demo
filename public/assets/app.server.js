module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/",t(t.s=3)}([function(e,t){e.exports=require("react")},function(e,t){},function(e,t,n){"use strict";function r(e,t,r,l){var c=t.key,f=t.timeout,s=void 0===f?15e3:f,p=t.onLoad,d=t.onError,y=t.isDynamic,h=t.modCache,m=t.promCache,b=a(y,e,t,r),v=b.chunkName,_=b.path,E=b.resolve,w=b.load,g=!_&&!E;return{requireSync:function(e,t){var r=(0,o.loadFromCache)(v,e,h);if(!r){var u=void 0;if(!(0,o.isWebpack)()&&_){var i=(0,o.callForString)(_,e)||"";u=(0,o.tryRequire)(i)}else if((0,o.isWebpack)()&&E){var a=(0,o.callForString)(E,e);n.m[a]&&(u=(0,o.tryRequire)(a))}u&&(r=(0,o.resolveExport)(u,c,p,v,e,t,h,!0))}return r},requireAsync:function(e,t){var n=(0,o.loadFromCache)(v,e,h);if(n)return Promise.resolve(n);var r=(0,o.loadFromPromiseCache)(v,e,m);if(r)return r;var u=new Promise(function(n,r){var u=function(e){if(e=e||new Error("timeout exceeded"),clearTimeout(i),d){var t="undefined"==typeof window;d(e,{isServer:t})}r(e)},i=s&&setTimeout(u,s),a=function(r){clearTimeout(i);var a=(0,o.resolveExport)(r,c,p,v,e,t,h);if(a)return n(a);u(new Error("export not found"))},l=w(e,{resolve:a,reject:u});l&&"function"==typeof l.then&&l.then(a).catch(u)});return(0,o.cacheProm)(u,v,e,m),u},addModule:function(e){if(o.isServer||o.isTest){if(v){var t=(0,o.callForString)(v,e);if(t&&u.add(t),!o.isTest)return}if((0,o.isWebpack)()){var n=(0,o.callForString)(E,e);n&&i.add(n)}else if(!(0,o.isWebpack)()){var r=(0,o.callForString)(_,e);r&&i.add(r)}}},shouldUpdate:function(n,u){if(g){var i=(0,o.callForString)(v,n),c=a(y,e,t,u);return i!==(0,o.callForString)(c.chunkName,u)}if(!l)return!1;var f=(0,o.callForString)(v,r),s=a(y,e,t,l);return f!==(0,o.callForString)(s.chunkName,l)},asyncOnly:g}}Object.defineProperty(t,"__esModule",{value:!0}),t.flushModuleIds=t.flushChunkNames=t.MODULE_IDS=t.CHUNK_NAMES=void 0,t.default=r;var o=n(8),u=t.CHUNK_NAMES=new Set,i=t.MODULE_IDS=new Set,a=(t.flushChunkNames=function(){var e=Array.from(u);return u.clear(),e},t.flushModuleIds=function(){var e=Array.from(i);return i.clear(),e},function(e,t,n,r){if(e)return"function"==typeof t?t(r):t;var o="function"==typeof t?t:function(){return t};return{file:"default",id:n.id||"default",chunkName:n.chunkName||"default",resolve:n.resolve||"",path:n.path||"",load:o}})},function(e,t,n){n(4),e.exports=n(5)},function(e,t){e.exports=require("babel-polyfill")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(o,u){try{var i=t[o](u),a=i.value}catch(e){return void n(e)}if(!i.done)return Promise.resolve(a).then(function(e){r("next",e)},function(e){r("throw",e)});e(a)}return r("next")})}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),i=r(u),a=n(6),l=r(a),c=n(7),f=n(10),s=r(f),p=n(13),d=r(p);t.default=function(e){var t=e.clientStats;return function(){var e=o(regeneratorRuntime.mark(function e(n,r){var o,u,a,f,p,y,h,m,b;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=i.default.createElement(d.default,null),u=process.hrtime(),e.next=4,l.default.renderToString(o);case 4:a=e.sent,f=process.hrtime(u),console.info("Cached render time: %ds %dms",f[0],f[1]/1e6),p=(0,c.flushChunkNames)(),y=(0,s.default)(t,{chunkNames:p}),h=y.js,m=y.styles,b=y.cssHash,r.render("index",{appString:a,js:h,styles:m,cssHash:b});case 10:case"end":return e.stop()}},e,void 0)}));return function(t,n){return e.apply(this,arguments)}}()}},function(e,t){e.exports=require("react-component-caching")},function(e,t,n){"use strict";e.exports={flushModuleIds:n(2).flushModuleIds,flushChunkNames:n(2).flushChunkNames}},function(e,t,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0}),t.cacheProm=t.loadFromPromiseCache=t.cacheExport=t.loadFromCache=t.callForString=t.createElement=t.findExport=t.resolveExport=t.requireById=t.tryRequire=t.DefaultError=t.DefaultLoading=t.babelInterop=t.isWebpack=t.isServer=t.isTest=void 0;var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)},u=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(u),a=(t.isTest=!1,t.isServer=!("undefined"!=typeof window&&window.document&&window.document.createElement)),l=t.isWebpack=function(){return void 0!==n},c=t.babelInterop=function(e){return e&&"object"===(void 0===e?"undefined":o(e))&&e.__esModule?e.default:e},f=(t.DefaultLoading=function(){return i.default.createElement("div",null,"Loading...")},t.DefaultError=function(e){var t=e.error;return i.default.createElement("div",null,"Error: ",t&&t.message)},t.tryRequire=function(e){try{return f(e)}catch(e){}return null},t.requireById=function(t){return l()||"string"!=typeof t?n(t):e.require(t)}),s=(t.resolveExport=function(e,t,n,r,o,u,i){var a=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=s(e,t);if(n&&e){n(e,{isServer:"undefined"==typeof window,isSync:a},o,u)}return r&&l&&d(l,r,o,i),l},t.findExport=function(e,t){return"function"==typeof t?t(e):null===t?e:e&&"object"===(void 0===e?"undefined":o(e))&&t?e[t]:c(e)}),p=(t.createElement=function(e,t){return i.default.isValidElement(e)?i.default.cloneElement(e,t):i.default.createElement(e,t)},t.callForString=function(e,t){return"function"==typeof e?e(t):e}),d=(t.loadFromCache=function(e,t,n){return!a&&n[p(e,t)]},t.cacheExport=function(e,t,n,r){return r[p(t,n)]=e});t.loadFromPromiseCache=function(e,t,n){return n[p(e,t)]},t.cacheProm=function(e,t,n,r){return r[p(t,n)]=e}}).call(t,n(9)(e))},function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.filesFromChunks=t.concatFilesAtKeys=t.normalizePath=t.isUnique=t.createFilesByModuleId=t.createFilesByPath=t.flushWebpack=t.flushBabel=t.flush=t.flushFilesPure=t.flushFiles=t.flushChunks=void 0;var o=n(11),u=function(e){return e&&e.__esModule?e:{default:e}}(o),i=null,a=null,l=void 0!==n,c={before:["bootstrap","vendor"],after:["main"]};t.default=function(e,t){return f(e,l,t)};var f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.before||c.before,i=w(o,e.assetsByChunkName),a=n.chunkNames?w(n.chunkNames,e.assetsByChunkName,!0):d(n.moduleIds||[],e,n.rootDir,t),l=n.after||c.after,f=w(l,e.assetsByChunkName);return(0,u.default)([].concat(r(i),r(a),r(f)),[].concat(r(i),r(f.reverse()),r(a)),e,n.outputPath)},s=function(e,t){return p(e,l,t)},p=function(e,t,n){var r=n.chunkNames?w(n.chunkNames,e.assetsByChunkName):d(n.moduleIds||[],e,n.rootDir,t),o=n.filter;if(o){if("function"==typeof o)return r.filter(o);var u=o instanceof RegExp?o:new RegExp("."+o+"$");return r.filter(function(e){return u.test(e)})}return r},d=function(e,t,n,r){return r?h(e,t).filter(v):y(e,t,n).filter(v)},y=function(e,t,n){if(!n)throw new Error("No `rootDir` was provided as an option to `flushChunks`.\n      Please provide one so modules rendered server-side can be\n      paired to their webpack equivalents client-side, and their\n      corresponding chunks.");var r=n;return i=i||m(t),E(i,e.map(function(e){return _(e,r)}))},h=function(e,t){return a=a||b(t),E(a,e)},m=function(e){var t=e.chunks,n=e.modules,r=t.reduce(function(e,t){return e[t.id]=t.files,e},{});return n.reduce(function(e,t){var n=t.name,o=E(r,t.chunks);return e[n]=o.filter(v),e},{})},b=function(e){var t=m(e);return e.modules.reduce(function(e,n){var r=n.name;return e[n.id]=t[r],e},{})},v=function(e,t,n){return n.indexOf(e)===t},_=function(e,t){return e.replace(t,".").replace(/\.js$/,"")+".js"},E=function(e,t){return t.reduce(function(t,n){return t.concat(e[n]||[])},[])},w=function(e,t,n){var o,u=function(e){var r=!(!t[e]&&!t[e+"-"]);return!r&&n&&console.warn("[FLUSH CHUNKS]: Unable to find "+e+" in Webpack chunks. Please check usage of Babel plugin."),r},i=function(e){return t[e]||t[e+"-"]};return(o=[]).concat.apply(o,r(e.filter(u).map(i)))};t.flushChunks=f,t.flushFiles=s,t.flushFilesPure=p,t.flush=d,t.flushBabel=y,t.flushWebpack=h,t.createFilesByPath=m,t.createFilesByModuleId=b,t.isUnique=v,t.normalizePath=_,t.concatFilesAtKeys=E,t.filesFromChunks=w},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.createCssHash=t.stylesAsString=t.isCss=t.isJs=t.getJsFileRegex=void 0;var o=n(0),u=r(o),i=n(12),a=r(i);t.default=function(e,t,n,r){var o=n.publicPath.replace(/\/$/,""),i=l(e),a=e.filter(function(e){return c(i,e)}),d=t.filter(f),y=p(n),h={Js:function(){return u.default.createElement("span",null,a.map(function(e,t){return u.default.createElement("script",{type:"text/javascript",src:o+"/"+e,key:t})}))},Styles:function(){return u.default.createElement("span",null,d.map(function(e,t){return u.default.createElement("link",{rel:"stylesheet",href:o+"/"+e,key:t})}))},js:{toString:function(){return a.map(function(e){return"<script type='text/javascript' src='"+o+"/"+e+"'><\/script>"}).join("\n")}},styles:{toString:function(){return d.map(function(e){return"<link rel='stylesheet' href='"+o+"/"+e+"' />"}).join("\n")}},Css:function(){return u.default.createElement("span",null,u.default.createElement("style",null,s(d,r)))},css:{toString:function(){return"<style>"+s(d,r)+"</style>"}},scripts:a,stylesheets:d,publicPath:o,outputPath:r,cssHashRaw:y,CssHash:function(){return u.default.createElement("script",{type:"text/javascript",dangerouslySetInnerHTML:{__html:JSON.stringify(y)}})},cssHash:{toString:function(){return"<script type='text/javascript'>window.__CSS_CHUNKS__= "+JSON.stringify(y)+"<\/script>"}}};return h};var l=t.getJsFileRegex=function(e){return!e.find(function(e){return e.includes("no_css")})?/\.js$/:/\.no_css\.js$/},c=t.isJs=function(e,t){return e.test(t)&&!/\.hot-update\.js$/.test(t)},f=t.isCss=function(e){return/\.css$/.test(e)},s=t.stylesAsString=function(e,t){if(!t)throw new Error("No `outputPath` was provided as an option to `flushChunks`. \n      Please provide one so stylesheets can be read from the\n      file system since you're embedding the css as a string.");var n=t.replace(/\/$/,"");return e.map(function(e){var t=n+"/"+e;return a.default.readFileSync(t,"utf8")}).join("\n").replace(/\/\*# sourceMappingURL=.+\*\//g,"")},p=t.createCssHash=function(e){var t=e.assetsByChunkName,n=e.publicPath;return Object.keys(t).reduce(function(e,r){if(!t[r]||!t[r].find)return e;var o=t[r].find(function(e){return e.endsWith(".css")});return o&&(e[r]=""+n+o),e},{})}},function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),c=r(l),f=n(14),s=r(f),p=n(15),d=r(p),y=n(18),h=r(y);n(1);var m=function(e){function t(){return o(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement("h1",null,"THIS IS AN APP"),c.default.createElement(s.default,null),c.default.createElement(h.default,null),c.default.createElement(h.default,null),c.default.createElement(d.default,null))}}]),t}(l.Component);t.default=m},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(a);n(1);var c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),i(t,[{key:"render",value:function(){return l.default.createElement("button",{onClick:function(){return console.log("yaclickedme")}},"Click me!")}}]),t}(a.Component);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),c=r(l),f=n(16),s=(r(f),n(17)),p=r(s);n(1);var d=function(e){function t(){return o(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"render",value:function(){for(var e=[],t=0;t<1e3;t++)e.push(c.default.createElement(p.default,{key:t,name:"Thing "+t,description:"This product is awesome!",price:10*t,nonTemplatized:"THIS TEXT SHOULD NEVER CHANGE"}));return c.default.createElement("div",null,c.default.createElement("h1",null,"Here's my list"),e)}}]),t}(l.Component);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(a);n(1);var c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),i(t,[{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement("li",null,"HAHAHA"),l.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."))}}]),t}(l.default.Component);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(a);n(1);var c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),i(t,[{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement("p",null,l.default.createElement("strong",null,"Product Name: "),this.props.name),l.default.createElement("p",null,l.default.createElement("strong",null,"Product Description: "),this.props.description),l.default.createElement("p",null,l.default.createElement("strong",null,"Price: "),"$",this.props.price),l.default.createElement("p",null,l.default.createElement("strong",null,"Non-Templatized Prop: "),this.props.nonTemplatized),l.default.createElement("hr",null))}}]),t}(a.Component);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),c=r(l),f=n(19),s=r(f);n(1);var p=function(e){function t(){return o(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement("h1",null,"This is a great blog post!"),c.default.createElement("h2",null,"Today is ",this.props.day,"."),c.default.createElement(s.default,null),c.default.createElement("p",null,this.props.thing))}}]),t}(l.Component);t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(a);n(1);var c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),i(t,[{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement("p",null,"Dear Diary,"),l.default.createElement("p",null,"Today I tried to understand React 16 source code. It was a rollercoaster of emotion. Now I'm making the next big web app. Everyone will love it."))}}]),t}(a.Component);t.default=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwLnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTJiMTRiMWZlNGExYTJmYmY3NTIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdW5pdmVyc2FsLWNvbXBvbmVudC9kaXN0L3JlcXVpcmVVbml2ZXJzYWxNb2R1bGUuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYmFiZWwtcG9seWZpbGxcIiIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LWNvbXBvbmVudC1jYWNoaW5nXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXZlcnNhbC1jb21wb25lbnQvc2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml2ZXJzYWwtY29tcG9uZW50L2Rpc3QvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWZsdXNoLWNodW5rcy9kaXN0L2ZsdXNoQ2h1bmtzLmpzIiwid2VicGFjazovLy8od2VicGFjayktZmx1c2gtY2h1bmtzL2Rpc3QvY3JlYXRlQXBpV2l0aENzcy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL0xpc3RJdGVtLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvUHJvZHVjdEluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9CbG9nUG9zdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL0Jsb2dDb250ZW50LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwicmVxdWlyZVVuaXZlcnNhbE1vZHVsZSIsInVuaXZlcnNhbENvbmZpZyIsIm9wdGlvbnMiLCJwcm9wcyIsInByZXZQcm9wcyIsImtleSIsIl9vcHRpb25zJHRpbWVvdXQiLCJ0aW1lb3V0IiwidW5kZWZpbmVkIiwib25Mb2FkIiwib25FcnJvciIsImlzRHluYW1pYyIsIm1vZENhY2hlIiwicHJvbUNhY2hlIiwiY29uZmlnIiwiZ2V0Q29uZmlnIiwiY2h1bmtOYW1lIiwicGF0aCIsInJlc29sdmUiLCJsb2FkIiwiYXN5bmNPbmx5IiwicmVxdWlyZVN5bmMiLCJjb250ZXh0IiwiZXhwIiwiX3V0aWxzIiwibG9hZEZyb21DYWNoZSIsIm1vZCIsImlzV2VicGFjayIsIm1vZHVsZVBhdGgiLCJjYWxsRm9yU3RyaW5nIiwidHJ5UmVxdWlyZSIsIndlYWtJZCIsInJlc29sdmVFeHBvcnQiLCJyZXF1aXJlQXN5bmMiLCJQcm9taXNlIiwiY2FjaGVkUHJvbWlzZSIsImxvYWRGcm9tUHJvbWlzZUNhY2hlIiwicHJvbSIsInJlcyIsInJlaiIsInJlamVjdCIsImVycm9yIiwiRXJyb3IiLCJjbGVhclRpbWVvdXQiLCJ0aW1lciIsIl9pc1NlcnZlciIsIndpbmRvdyIsImlzU2VydmVyIiwic2V0VGltZW91dCIsInJlcXVlc3QiLCJ0aGVuIiwiY2F0Y2giLCJjYWNoZVByb20iLCJhZGRNb2R1bGUiLCJpc1Rlc3QiLCJDSFVOS19OQU1FUyIsImFkZCIsIk1PRFVMRV9JRFMiLCJzaG91bGRVcGRhdGUiLCJuZXh0IiwicHJldiIsIl9jYWNoZUtleSIsIl9jb25maWciLCJjYWNoZUtleSIsInZhbHVlIiwiZmx1c2hNb2R1bGVJZHMiLCJmbHVzaENodW5rTmFtZXMiLCJkZWZhdWx0IiwiU2V0IiwiY2h1bmtzIiwiQXJyYXkiLCJmcm9tIiwiY2xlYXIiLCJpZHMiLCJmaWxlIiwiaWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsImdlbiIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsInN0ZXAiLCJhcmciLCJpbmZvIiwiZG9uZSIsImVyciIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfcmVhY3RDb21wb25lbnRDYWNoaW5nIiwiX3JlYWN0Q29tcG9uZW50Q2FjaGluZzIiLCJfc2VydmVyIiwiX3dlYnBhY2tGbHVzaENodW5rcyIsIl93ZWJwYWNrRmx1c2hDaHVua3MyIiwiX0FwcCIsIl9BcHAyIiwiX3JlZiIsImNsaWVudFN0YXRzIiwiX3JlZjIiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsInJlcSIsImFwcCIsInN0YXJ0X2NhY2hlZCIsImFwcFN0cmluZyIsImVuZF9jYWNoZWQiLCJjaHVua05hbWVzIiwiX2ZsdXNoQ2h1bmtzIiwianMiLCJzdHlsZXMiLCJjc3NIYXNoIiwid3JhcCIsIl9jb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInByb2Nlc3MiLCJocnRpbWUiLCJyZW5kZXJUb1N0cmluZyIsInNlbnQiLCJjb25zb2xlIiwicmVuZGVyIiwic3RvcCIsIl94IiwiX3gyIiwiX3R5cGVvZjIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiY2FjaGVFeHBvcnQiLCJmaW5kRXhwb3J0IiwicmVxdWlyZUJ5SWQiLCJEZWZhdWx0RXJyb3IiLCJEZWZhdWx0TG9hZGluZyIsImJhYmVsSW50ZXJvcCIsIl90eXBlb2YiLCJkb2N1bWVudCIsIm1lc3NhZ2UiLCJpc1N5bmMiLCJsZW5ndGgiLCJDb21wb25lbnQiLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsInN0ckZ1biIsInByb21pc2VjYWNoZSIsInByIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsImlzQXJyYXkiLCJhcnIyIiwiZmlsZXNGcm9tQ2h1bmtzIiwiY29uY2F0RmlsZXNBdEtleXMiLCJub3JtYWxpemVQYXRoIiwiaXNVbmlxdWUiLCJjcmVhdGVGaWxlc0J5TW9kdWxlSWQiLCJjcmVhdGVGaWxlc0J5UGF0aCIsImZsdXNoV2VicGFjayIsImZsdXNoQmFiZWwiLCJmbHVzaCIsImZsdXNoRmlsZXNQdXJlIiwiZmx1c2hGaWxlcyIsImZsdXNoQ2h1bmtzIiwiX2NyZWF0ZUFwaVdpdGhDc3MiLCJfY3JlYXRlQXBpV2l0aENzczIiLCJmaWxlc0J5UGF0aCIsImZpbGVzQnlNb2R1bGVJZCIsIklTX1dFQlBBQ0siLCJkZWZhdWx0cyIsImJlZm9yZSIsImFmdGVyIiwic3RhdHMiLCJvcHRzIiwiYmVmb3JlRW50cmllcyIsImpzQmVmb3JlIiwiYXNzZXRzQnlDaHVua05hbWUiLCJmaWxlcyIsIm1vZHVsZUlkcyIsInJvb3REaXIiLCJhZnRlckVudHJpZXMiLCJqc0FmdGVyIiwiY29uY2F0IiwicmV2ZXJzZSIsIm91dHB1dFBhdGgiLCJmaWx0ZXIiLCJyZWdleCIsIlJlZ0V4cCIsInRlc3QiLCJkaXIiLCJtYXAiLCJmaWxlc0J5Q2h1bmsiLCJyZWR1Y2UiLCJjaHVuayIsImZpbGVQYXRoIiwidiIsInNlbGYiLCJpbmRleE9mIiwicmVwbGFjZSIsImlucHV0RmlsZXNNYXAiLCJwYXRoc09ySWRzT3JDaHVua3MiLCJhc3NldHMiLCJjaGVja0NodW5rTmFtZXMiLCJoYXNDaHVuayIsImVudHJ5IiwicmVzdWx0Iiwid2FybiIsImVudHJ5VG9GaWxlcyIsImNyZWF0ZUNzc0hhc2giLCJzdHlsZXNBc1N0cmluZyIsImlzQ3NzIiwiaXNKcyIsImdldEpzRmlsZVJlZ2V4IiwiX2ZzIiwiX2ZzMiIsImZpbGVzT3JkZXJlZEZvckNzcyIsInB1YmxpY1BhdGgiLCJzY3JpcHRzIiwic3R5bGVzaGVldHMiLCJjc3NIYXNoUmF3IiwiYXBpIiwiSnMiLCJ0eXBlIiwic3JjIiwiU3R5bGVzIiwicmVsIiwiaHJlZiIsInRvU3RyaW5nIiwiam9pbiIsIkNzcyIsImNzcyIsIkNzc0hhc2giLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaW5kIiwiaW5jbHVkZXMiLCJyZWFkRmlsZVN5bmMiLCJrZXlzIiwiaGFzaCIsImVuZHNXaXRoIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfQnV0dG9uIiwiX0J1dHRvbjIiLCJfTGlzdCIsIl9MaXN0MiIsIl9CbG9nUG9zdCIsIl9CbG9nUG9zdDIiLCJBcHAiLCJfQ29tcG9uZW50IiwiZ2V0UHJvdG90eXBlT2YiLCJCdXR0b24iLCJvbkNsaWNrIiwibG9nIiwiX0xpc3RJdGVtIiwiX1Byb2R1Y3RJbmZvIiwiX1Byb2R1Y3RJbmZvMiIsIkxpc3QiLCJidW5jaE9mUHJvZHVjdHMiLCJwdXNoIiwiZGVzY3JpcHRpb24iLCJwcmljZSIsIm5vblRlbXBsYXRpemVkIiwiTGlzdEl0ZW0iLCJfUmVhY3QkQ29tcG9uZW50IiwiUHJvZHVjdEluZm8iLCJfQmxvZ0NvbnRlbnQiLCJfQmxvZ0NvbnRlbnQyIiwiQmxvZ1Bvc3QiLCJkYXkiLCJ0aGluZyIsIkJsb2dDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsUUFDRSxTQUFVQyxHQ0duQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUgsT0FHQSxJQUFBRCxHQUFBSyxFQUFBRCxJQUNBRSxFQUFBRixFQUNBRyxHQUFBLEVBQ0FOLFdBVUEsT0FOQUMsR0FBQUUsR0FBQUksS0FBQVIsRUFBQUMsUUFBQUQsSUFBQUMsUUFBQUUsR0FHQUgsRUFBQU8sR0FBQSxFQUdBUCxFQUFBQyxRQXZCQSxHQUFBSSxLQTREQSxPQWhDQUYsR0FBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQUwsRUFHQUYsRUFBQVEsRUFBQSxTQUFBVixFQUFBVyxFQUFBQyxHQUNBVixFQUFBVyxFQUFBYixFQUFBVyxJQUNBRyxPQUFBQyxlQUFBZixFQUFBVyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVYsRUFBQWlCLEVBQUEsU0FBQXBCLEdBQ0EsR0FBQWEsR0FBQWIsS0FBQXFCLFdBQ0EsV0FBMkIsTUFBQXJCLEdBQUEsU0FDM0IsV0FBaUMsTUFBQUEsR0FFakMsT0FEQUcsR0FBQVEsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBVixFQUFBVyxFQUFBLFNBQUFRLEVBQUFDLEdBQXNELE1BQUFSLFFBQUFTLFVBQUFDLGVBQUFqQixLQUFBYyxFQUFBQyxJQUd0RHBCLEVBQUF1QixFQUFBLElBR0F2QixJQUFBd0IsRUFBQSxLRE9NLFNBQVUzQixFQUFRQyxHRXBFeEJELEVBQUFDLFFBQUEyQixRQUFBLFVGMEVNLFNBQVU1QixFQUFRQyxLQU1sQixTQUFVRCxFQUFRQyxFQUFTRSxHQUVqQyxZR3JFQSxTQUFTMEIsR0FBdUJDLEVBQWlCQyxFQUFTQyxFQUFPQyxHQUMvRCxHQUFJQyxHQUFNSCxFQUFRRyxJQUNkQyxFQUFtQkosRUFBUUssUUFDM0JB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LE1BQU9BLElBQU9BLEVBQUlyRixXQUFhcUYsR0FBUVYsUUFBU1UsSUFKbERZLEVtQjMxQ3JDbkgsR0FBQSxFbkIwMkNBLEltQnIyQ3FCK1QsR25CcTJDSCxTQUFVdEIsR0FHMUIsUUFBU3NCLEtBR1AsTUFGQWhELEdBQWdCbkssS0FBTW1OLEdBRWY1QyxFQUEyQnZLLE1BQU9tTixFQUFZcEMsV0FBYS9RLE9BQU84UixlQUFlcUIsSUFBY3BOLE1BQU1DLEtBQU1DLFlBdUJwSCxNQTVCQXdLLEdBQVUwQyxFQUFhdEIsR0FRdkJiLEVBQWFtQyxJQUNYaFMsSUFBSyxTQUNMMkQsTUFBTyxXbUI3MkNILE1BQ0UwQixHQUFBdkIsUUFBQWlELGNBQUEsV0FDRTFCLEVBQUF2QixRQUFBaUQsY0FBQSx3QkFHQTFCLEVBQUF2QixRQUFBaUQsY0FBQSxrS25CMDNDSGlMLEdBQ1A1TSxFQUFPb0QsVUFFVHpLLEdBQVErRixRbUJyNENha08iLCJmaWxlIjoiYXBwLnNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mbHVzaE1vZHVsZUlkcyA9IGV4cG9ydHMuZmx1c2hDaHVua05hbWVzID0gZXhwb3J0cy5NT0RVTEVfSURTID0gZXhwb3J0cy5DSFVOS19OQU1FUyA9IHVuZGVmaW5lZDtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVpcmVVbml2ZXJzYWxNb2R1bGU7XG5cbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgQ0hVTktfTkFNRVMgPSBleHBvcnRzLkNIVU5LX05BTUVTID0gbmV3IFNldCgpO1xudmFyIE1PRFVMRV9JRFMgPSBleHBvcnRzLk1PRFVMRV9JRFMgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVVbml2ZXJzYWxNb2R1bGUodW5pdmVyc2FsQ29uZmlnLCBvcHRpb25zLCBwcm9wcywgcHJldlByb3BzKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSxcbiAgICAgIF9vcHRpb25zJHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX29wdGlvbnMkdGltZW91dCA9PT0gdW5kZWZpbmVkID8gMTUwMDAgOiBfb3B0aW9ucyR0aW1lb3V0LFxuICAgICAgb25Mb2FkID0gb3B0aW9ucy5vbkxvYWQsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yLFxuICAgICAgaXNEeW5hbWljID0gb3B0aW9ucy5pc0R5bmFtaWMsXG4gICAgICBtb2RDYWNoZSA9IG9wdGlvbnMubW9kQ2FjaGUsXG4gICAgICBwcm9tQ2FjaGUgPSBvcHRpb25zLnByb21DYWNoZTtcblxuICB2YXIgY29uZmlnID0gZ2V0Q29uZmlnKGlzRHluYW1pYywgdW5pdmVyc2FsQ29uZmlnLCBvcHRpb25zLCBwcm9wcyk7XG4gIHZhciBjaHVua05hbWUgPSBjb25maWcuY2h1bmtOYW1lLFxuICAgICAgcGF0aCA9IGNvbmZpZy5wYXRoLFxuICAgICAgcmVzb2x2ZSA9IGNvbmZpZy5yZXNvbHZlLFxuICAgICAgbG9hZCA9IGNvbmZpZy5sb2FkO1xuXG4gIHZhciBhc3luY09ubHkgPSAhcGF0aCAmJiAhcmVzb2x2ZTtcblxuICB2YXIgcmVxdWlyZVN5bmMgPSBmdW5jdGlvbiByZXF1aXJlU3luYyhwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBleHAgPSAoMCwgX3V0aWxzLmxvYWRGcm9tQ2FjaGUpKGNodW5rTmFtZSwgcHJvcHMsIG1vZENhY2hlKTtcblxuICAgIGlmICghZXhwKSB7XG4gICAgICB2YXIgbW9kID0gdm9pZCAwO1xuXG4gICAgICBpZiAoISgwLCBfdXRpbHMuaXNXZWJwYWNrKSgpICYmIHBhdGgpIHtcbiAgICAgICAgdmFyIG1vZHVsZVBhdGggPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKHBhdGgsIHByb3BzKSB8fCAnJztcbiAgICAgICAgbW9kID0gKDAsIF91dGlscy50cnlSZXF1aXJlKShtb2R1bGVQYXRoKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc1dlYnBhY2spKCkgJiYgcmVzb2x2ZSkge1xuICAgICAgICB2YXIgd2Vha0lkID0gKDAsIF91dGlscy5jYWxsRm9yU3RyaW5nKShyZXNvbHZlLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKF9fd2VicGFja19yZXF1aXJlX18ubVt3ZWFrSWRdKSB7XG4gICAgICAgICAgbW9kID0gKDAsIF91dGlscy50cnlSZXF1aXJlKSh3ZWFrSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgZXhwID0gKDAsIF91dGlscy5yZXNvbHZlRXhwb3J0KShtb2QsIGtleSwgb25Mb2FkLCBjaHVua05hbWUsIHByb3BzLCBjb250ZXh0LCBtb2RDYWNoZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cDtcbiAgfTtcblxuICB2YXIgcmVxdWlyZUFzeW5jID0gZnVuY3Rpb24gcmVxdWlyZUFzeW5jKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGV4cCA9ICgwLCBfdXRpbHMubG9hZEZyb21DYWNoZSkoY2h1bmtOYW1lLCBwcm9wcywgbW9kQ2FjaGUpO1xuICAgIGlmIChleHApIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXhwKTtcblxuICAgIHZhciBjYWNoZWRQcm9taXNlID0gKDAsIF91dGlscy5sb2FkRnJvbVByb21pc2VDYWNoZSkoY2h1bmtOYW1lLCBwcm9wcywgcHJvbUNhY2hlKTtcbiAgICBpZiAoY2FjaGVkUHJvbWlzZSkgcmV0dXJuIGNhY2hlZFByb21pc2U7XG5cbiAgICB2YXIgcHJvbSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdChlcnJvcikge1xuICAgICAgICBlcnJvciA9IGVycm9yIHx8IG5ldyBFcnJvcigndGltZW91dCBleGNlZWRlZCcpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgIHZhciBfaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICB2YXIgaW5mbyA9IHsgaXNTZXJ2ZXI6IF9pc1NlcnZlciB9O1xuICAgICAgICAgIG9uRXJyb3IoZXJyb3IsIGluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHJlaihlcnJvcik7XG4gICAgICB9O1xuXG4gICAgICAvLyBjb25zdCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dChyZWplY3QsIHRpbWVvdXQpXG4gICAgICB2YXIgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQocmVqZWN0LCB0aW1lb3V0KTtcblxuICAgICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKG1vZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXG4gICAgICAgIHZhciBleHAgPSAoMCwgX3V0aWxzLnJlc29sdmVFeHBvcnQpKG1vZCwga2V5LCBvbkxvYWQsIGNodW5rTmFtZSwgcHJvcHMsIGNvbnRleHQsIG1vZENhY2hlKTtcbiAgICAgICAgaWYgKGV4cCkgcmV0dXJuIHJlcyhleHApO1xuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2V4cG9ydCBub3QgZm91bmQnKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdCA9IGxvYWQocHJvcHMsIHsgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfSk7XG5cbiAgICAgIC8vIGlmIGxvYWQgZG9lc24ndCByZXR1cm4gYSBwcm9taXNlLCBpdCBtdXN0IGNhbGwgcmVzb2x2ZUltcG9ydFxuICAgICAgLy8gaXRzZWxmLiBNb3N0IGNvbW1vbiBpcyB0aGUgcHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBiZWxvdy5cbiAgICAgIGlmICghcmVxdWVzdCB8fCB0eXBlb2YgcmVxdWVzdC50aGVuICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gICAgICByZXF1ZXN0LnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcblxuICAgICgwLCBfdXRpbHMuY2FjaGVQcm9tKShwcm9tLCBjaHVua05hbWUsIHByb3BzLCBwcm9tQ2FjaGUpO1xuICAgIHJldHVybiBwcm9tO1xuICB9O1xuXG4gIHZhciBhZGRNb2R1bGUgPSBmdW5jdGlvbiBhZGRNb2R1bGUocHJvcHMpIHtcbiAgICBpZiAoX3V0aWxzLmlzU2VydmVyIHx8IF91dGlscy5pc1Rlc3QpIHtcbiAgICAgIGlmIChjaHVua05hbWUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKGNodW5rTmFtZSwgcHJvcHMpO1xuICAgICAgICBpZiAobmFtZSkgQ0hVTktfTkFNRVMuYWRkKG5hbWUpO1xuICAgICAgICBpZiAoIV91dGlscy5pc1Rlc3QpIHJldHVybjsgLy8gbWFrZXMgdGVzdHMgd2F5IHNtYWxsZXIgdG8gcnVuIGJvdGgga2luZHNcbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNXZWJwYWNrKSgpKSB7XG4gICAgICAgIHZhciB3ZWFrSWQgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKHJlc29sdmUsIHByb3BzKTtcbiAgICAgICAgaWYgKHdlYWtJZCkgTU9EVUxFX0lEUy5hZGQod2Vha0lkKTtcbiAgICAgIH0gZWxzZSBpZiAoISgwLCBfdXRpbHMuaXNXZWJwYWNrKSgpKSB7XG4gICAgICAgIHZhciBtb2R1bGVQYXRoID0gKDAsIF91dGlscy5jYWxsRm9yU3RyaW5nKShwYXRoLCBwcm9wcyk7XG4gICAgICAgIGlmIChtb2R1bGVQYXRoKSBNT0RVTEVfSURTLmFkZChtb2R1bGVQYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZShuZXh0LCBwcmV2KSB7XG4gICAgaWYgKGFzeW5jT25seSkge1xuICAgICAgdmFyIF9jYWNoZUtleSA9ICgwLCBfdXRpbHMuY2FsbEZvclN0cmluZykoY2h1bmtOYW1lLCBuZXh0KTtcblxuICAgICAgdmFyIF9jb25maWcgPSBnZXRDb25maWcoaXNEeW5hbWljLCB1bml2ZXJzYWxDb25maWcsIG9wdGlvbnMsIHByZXYpO1xuICAgICAgdmFyIF9wcmV2Q2FjaGVLZXkgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKF9jb25maWcuY2h1bmtOYW1lLCBwcmV2KTtcblxuICAgICAgcmV0dXJuIF9jYWNoZUtleSAhPT0gX3ByZXZDYWNoZUtleTtcbiAgICB9XG5cbiAgICAvLyBiZWxvdyBpcyB3aGF0IHRoZSBiYWJlbC1wbHVnaW4gdHJpZ2dlcnNcblxuICAgIGlmICghcHJldlByb3BzKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgY2FjaGVLZXkgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKGNodW5rTmFtZSwgcHJvcHMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IGdldENvbmZpZyhpc0R5bmFtaWMsIHVuaXZlcnNhbENvbmZpZywgb3B0aW9ucywgcHJldlByb3BzKTtcbiAgICB2YXIgcHJldkNhY2hlS2V5ID0gKDAsIF91dGlscy5jYWxsRm9yU3RyaW5nKShjb25maWcuY2h1bmtOYW1lLCBwcmV2UHJvcHMpO1xuXG4gICAgcmV0dXJuIGNhY2hlS2V5ICE9PSBwcmV2Q2FjaGVLZXk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlU3luYzogcmVxdWlyZVN5bmMsXG4gICAgcmVxdWlyZUFzeW5jOiByZXF1aXJlQXN5bmMsXG4gICAgYWRkTW9kdWxlOiBhZGRNb2R1bGUsXG4gICAgc2hvdWxkVXBkYXRlOiBzaG91bGRVcGRhdGUsXG4gICAgYXN5bmNPbmx5OiBhc3luY09ubHlcbiAgfTtcbn1cblxudmFyIGZsdXNoQ2h1bmtOYW1lcyA9IGV4cG9ydHMuZmx1c2hDaHVua05hbWVzID0gZnVuY3Rpb24gZmx1c2hDaHVua05hbWVzKCkge1xuICB2YXIgY2h1bmtzID0gQXJyYXkuZnJvbShDSFVOS19OQU1FUyk7XG4gIENIVU5LX05BTUVTLmNsZWFyKCk7XG4gIHJldHVybiBjaHVua3M7XG59O1xuXG52YXIgZmx1c2hNb2R1bGVJZHMgPSBleHBvcnRzLmZsdXNoTW9kdWxlSWRzID0gZnVuY3Rpb24gZmx1c2hNb2R1bGVJZHMoKSB7XG4gIHZhciBpZHMgPSBBcnJheS5mcm9tKE1PRFVMRV9JRFMpO1xuICBNT0RVTEVfSURTLmNsZWFyKCk7XG4gIHJldHVybiBpZHM7XG59O1xuXG52YXIgZ2V0Q29uZmlnID0gZnVuY3Rpb24gZ2V0Q29uZmlnKGlzRHluYW1pYywgdW5pdmVyc2FsQ29uZmlnLCBvcHRpb25zLCBwcm9wcykge1xuICBpZiAoaXNEeW5hbWljKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml2ZXJzYWxDb25maWcgPT09ICdmdW5jdGlvbicgPyB1bml2ZXJzYWxDb25maWcocHJvcHMpIDogdW5pdmVyc2FsQ29uZmlnO1xuICB9XG5cbiAgdmFyIGxvYWQgPSB0eXBlb2YgdW5pdmVyc2FsQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdW5pdmVyc2FsQ29uZmlnIDogLy8gJEZsb3dJc3N1ZVxuICBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuaXZlcnNhbENvbmZpZztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGZpbGU6ICdkZWZhdWx0JyxcbiAgICBpZDogb3B0aW9ucy5pZCB8fCAnZGVmYXVsdCcsXG4gICAgY2h1bmtOYW1lOiBvcHRpb25zLmNodW5rTmFtZSB8fCAnZGVmYXVsdCcsXG4gICAgcmVzb2x2ZTogb3B0aW9ucy5yZXNvbHZlIHx8ICcnLFxuICAgIHBhdGg6IG9wdGlvbnMucGF0aCB8fCAnJyxcbiAgICBsb2FkOiBsb2FkXG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcG9seWZpbGxcIik7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RDb21wb25lbnRDYWNoaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9yZWFjdENvbXBvbmVudENhY2hpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDb21wb25lbnRDYWNoaW5nKTtcblxudmFyIF9zZXJ2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3dlYnBhY2tGbHVzaENodW5rcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX3dlYnBhY2tGbHVzaENodW5rczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWJwYWNrRmx1c2hDaHVua3MpO1xuXG52YXIgX0FwcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX0FwcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BcHApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgZnVuY3Rpb24gc3RlcChrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgeyBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgc3RlcChcInRocm93XCIsIGVycik7IH0pOyB9IH0gcmV0dXJuIHN0ZXAoXCJuZXh0XCIpOyB9KTsgfTsgfVxuLy8gaW1wb3J0IFJlYWN0Q0MgZnJvbSAnLi4vLi4vZGV2ZWxvcG1lbnRCdWlsZCc7XG4vLyBpbXBvcnQgUmVhY3RDQyBmcm9tICcuLi8uLi9wcm9kdWN0aW9uQnVpbGQnO1xuXG5cbi8vIGNhbiBwYXNzIGluIG1heC1zaXplLCBvdGhlcndpc2UgZGVmYXVsdHMgdG8gMSBtaWxsaW9uXG4vLyBjb25zdCBjYWNoZSA9IG5ldyBSZWFjdENDLkNvbXBvbmVudENhY2hlKCk7XG4vLyBpbXBvcnQgcmVkaXMgZnJvbSAncmVkaXMnO1xuLy8gY29uc3QgY2FjaGUgPSByZWRpcy5jcmVhdGVDbGllbnQoKTtcbi8vIGltcG9ydCBtZW1jYWNoZWQgZnJvbSAnbWVtY2FjaGVkJztcbi8vIGNvbnN0IGNhY2hlID0gbmV3IG1lbWNhY2hlZCgnbG9jYWxob3N0OjExMjExJyk7XG5cbi8vIEZvcmNlIE5vZGVTdHJlYW1cbi8vIGltcG9ydCBjcmVhdGVDYWNoZVN0cmVhbSBmcm9tICcuL2NhY2hlU3RyZWFtJztcblxudmFyIGh0bWxTdGFydCA9ICc8aHRtbD48aGVhZD48dGl0bGU+UGFnZTwvdGl0bGU+PC9oZWFkPjxib2R5PjxkaXYgaWQ9XCJyZWFjdC1yb290XCI+JztcbnZhciBodG1sRW5kID0gXCI8L2Rpdj48L2JvZHk+PC9odG1sPlwiO1xuXG52YXIgc3RyZWFtaW5nU3RhcnQgPSB7XG4gIHNsaWNlU3RhcnRDb3VudDogaHRtbFN0YXJ0Lmxlbmd0aFxufTtcbi8qKlxuICogQHBhcmFtIGNsaWVudFN0YXRzIFBhcmFtZXRlciBwYXNzZWQgYnkgaG90IHNlcnZlciBtaWRkbGV3YXJlXG4gKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNsaWVudFN0YXRzID0gX3JlZi5jbGllbnRTdGF0cztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVxLCByZXMpIHtcbiAgICAgIHZhciBhcHAsIHN0YXJ0X2NhY2hlZCwgYXBwU3RyaW5nLCBlbmRfY2FjaGVkLCBjaHVua05hbWVzLCBfZmx1c2hDaHVua3MsIGpzLCBzdHlsZXMsIGNzc0hhc2g7XG5cbiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgLy8gTmVlZCBUbyBDb21lIGJhY2sgVG8gSWYgU3RhdGVtZW50XG4gICAgICAgICAgICAgIC8vIGlmKGZhbHNlKXtcbiAgICAgICAgICAgICAgLy8gY29uc3QgY2FjaGVTdHJlYW0gPSBjcmVhdGVDYWNoZVN0cmVhbShjYWNoZSwgc3RyZWFtaW5nU3RhcnQpO1xuICAgICAgICAgICAgICAvLyBjYWNoZVN0cmVhbS5waXBlKHJlcyk7XG4gICAgICAgICAgICAgIC8vIGNhY2hlU3RyZWFtLndyaXRlKGh0bWxTdGFydCk7XG5cbiAgICAgICAgICAgICAgLy8gUmVhY3RDQy5yZW5kZXJUb05vZGVTdHJlYW0oPEFwcCAvPiwgY2FjaGUsIHJlcyk7XG4gICAgICAgICAgICAgIC8vIHN0cmVhbS5waXBlKGNhY2hlU3RyZWFtLCB7IGVuZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgIC8vIHN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vICAgY2FjaGVTdHJlYW0uZW5kKGh0bWxFbmQpO1xuICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAvLyBlbHNlIGlmICh0cnVlKXtcbiAgICAgICAgICAgICAgYXBwID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0FwcDIuZGVmYXVsdCwgbnVsbCk7XG4gICAgICAgICAgICAgIHN0YXJ0X2NhY2hlZCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0O1xuICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Q29tcG9uZW50Q2FjaGluZzIuZGVmYXVsdC5yZW5kZXJUb1N0cmluZyhhcHApO1xuXG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIGFwcFN0cmluZyA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgIGVuZF9jYWNoZWQgPSBwcm9jZXNzLmhydGltZShzdGFydF9jYWNoZWQpO1xuXG4gICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkNhY2hlZCByZW5kZXIgdGltZTogJWRzICVkbXNcIiwgZW5kX2NhY2hlZFswXSwgZW5kX2NhY2hlZFsxXSAvIDEwMDAwMDApO1xuICAgICAgICAgICAgICBjaHVua05hbWVzID0gKDAsIF9zZXJ2ZXIuZmx1c2hDaHVua05hbWVzKSgpO1xuICAgICAgICAgICAgICBfZmx1c2hDaHVua3MgPSAoMCwgX3dlYnBhY2tGbHVzaENodW5rczIuZGVmYXVsdCkoY2xpZW50U3RhdHMsIHsgY2h1bmtOYW1lczogY2h1bmtOYW1lcyB9KSwganMgPSBfZmx1c2hDaHVua3MuanMsIHN0eWxlcyA9IF9mbHVzaENodW5rcy5zdHlsZXMsIGNzc0hhc2ggPSBfZmx1c2hDaHVua3MuY3NzSGFzaDtcblxuXG4gICAgICAgICAgICAgIHJlcy5yZW5kZXIoXCJpbmRleFwiLCB7XG4gICAgICAgICAgICAgICAgYXBwU3RyaW5nOiBhcHBTdHJpbmcsXG4gICAgICAgICAgICAgICAganM6IGpzLFxuICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgICAgIGNzc0hhc2g6IGNzc0hhc2hcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUsIHVuZGVmaW5lZCk7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyKSB7XG4gICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtY29tcG9uZW50LWNhY2hpbmdcIik7XG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmx1c2hNb2R1bGVJZHM6IF9fd2VicGFja19yZXF1aXJlX18oMikuZmx1c2hNb2R1bGVJZHMsXG4gIGZsdXNoQ2h1bmtOYW1lczogX193ZWJwYWNrX3JlcXVpcmVfXygyKS5mbHVzaENodW5rTmFtZXNcbn07XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHtcblxudmFyIF90eXBlb2YyID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FjaGVQcm9tID0gZXhwb3J0cy5sb2FkRnJvbVByb21pc2VDYWNoZSA9IGV4cG9ydHMuY2FjaGVFeHBvcnQgPSBleHBvcnRzLmxvYWRGcm9tQ2FjaGUgPSBleHBvcnRzLmNhbGxGb3JTdHJpbmcgPSBleHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBleHBvcnRzLmZpbmRFeHBvcnQgPSBleHBvcnRzLnJlc29sdmVFeHBvcnQgPSBleHBvcnRzLnJlcXVpcmVCeUlkID0gZXhwb3J0cy50cnlSZXF1aXJlID0gZXhwb3J0cy5EZWZhdWx0RXJyb3IgPSBleHBvcnRzLkRlZmF1bHRMb2FkaW5nID0gZXhwb3J0cy5iYWJlbEludGVyb3AgPSBleHBvcnRzLmlzV2VicGFjayA9IGV4cG9ydHMuaXNTZXJ2ZXIgPSBleHBvcnRzLmlzVGVzdCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZjIob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YyKG9iaik7XG59O1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG52YXIgaXNUZXN0ID0gZXhwb3J0cy5pc1Rlc3QgPSBcInByb2R1Y3Rpb25cIiA9PT0gJ3Rlc3QnO1xudmFyIGlzU2VydmVyID0gZXhwb3J0cy5pc1NlcnZlciA9ICEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxudmFyIGlzV2VicGFjayA9IGV4cG9ydHMuaXNXZWJwYWNrID0gZnVuY3Rpb24gaXNXZWJwYWNrKCkge1xuICByZXR1cm4gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gIT09ICd1bmRlZmluZWQnO1xufTtcbnZhciBiYWJlbEludGVyb3AgPSBleHBvcnRzLmJhYmVsSW50ZXJvcCA9IGZ1bmN0aW9uIGJhYmVsSW50ZXJvcChtb2QpIHtcbiAgcmV0dXJuIG1vZCAmJiAodHlwZW9mIG1vZCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kKSkgPT09ICdvYmplY3QnICYmIG1vZC5fX2VzTW9kdWxlID8gbW9kLmRlZmF1bHQgOiBtb2Q7XG59O1xuXG52YXIgRGVmYXVsdExvYWRpbmcgPSBleHBvcnRzLkRlZmF1bHRMb2FkaW5nID0gZnVuY3Rpb24gRGVmYXVsdExvYWRpbmcoKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCwgJ0xvYWRpbmcuLi4nKTtcbn07XG52YXIgRGVmYXVsdEVycm9yID0gZXhwb3J0cy5EZWZhdWx0RXJyb3IgPSBmdW5jdGlvbiBEZWZhdWx0RXJyb3IoX3JlZikge1xuICB2YXIgZXJyb3IgPSBfcmVmLmVycm9yO1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwsICdFcnJvcjogJywgZXJyb3IgJiYgZXJyb3IubWVzc2FnZSk7XG59O1xuXG52YXIgdHJ5UmVxdWlyZSA9IGV4cG9ydHMudHJ5UmVxdWlyZSA9IGZ1bmN0aW9uIHRyeVJlcXVpcmUoaWQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZUJ5SWQoaWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyB3YXJuIGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSByZXF1aXJpbmcgdGhlIGNodW5rIGR1cmluZyBkZXZlbG9wbWVudFxuICAgIC8vIHRoaXMgY2FuIHNvbWV0aW1lcyBsZWFkIHRoZSBzZXJ2ZXIgdG8gcmVuZGVyIHRoZSBsb2FkaW5nIGNvbXBvbmVudC5cbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGNvbnNvbGUud2FybignY2h1bmsgbm90IGF2YWlsYWJsZSBmb3Igc3luY2hyb25vdXMgcmVxdWlyZSB5ZXQ6ICcgKyBpZCArICc6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgcmVxdWlyZUJ5SWQgPSBleHBvcnRzLnJlcXVpcmVCeUlkID0gZnVuY3Rpb24gcmVxdWlyZUJ5SWQoaWQpIHtcbiAgaWYgKCFpc1dlYnBhY2soKSAmJiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG1vZHVsZS5yZXF1aXJlKGlkKTtcbiAgfVxuXG4gIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn07XG5cbnZhciByZXNvbHZlRXhwb3J0ID0gZXhwb3J0cy5yZXNvbHZlRXhwb3J0ID0gZnVuY3Rpb24gcmVzb2x2ZUV4cG9ydChtb2QsIGtleSwgb25Mb2FkLCBjaHVua05hbWUsIHByb3BzLCBjb250ZXh0LCBtb2RDYWNoZSkge1xuICB2YXIgaXNTeW5jID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiBmYWxzZTtcblxuICB2YXIgZXhwID0gZmluZEV4cG9ydChtb2QsIGtleSk7XG4gIGlmIChvbkxvYWQgJiYgbW9kKSB7XG4gICAgdmFyIF9pc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBpbmZvID0geyBpc1NlcnZlcjogX2lzU2VydmVyLCBpc1N5bmM6IGlzU3luYyB9O1xuICAgIG9uTG9hZChtb2QsIGluZm8sIHByb3BzLCBjb250ZXh0KTtcbiAgfVxuICBpZiAoY2h1bmtOYW1lICYmIGV4cCkgY2FjaGVFeHBvcnQoZXhwLCBjaHVua05hbWUsIHByb3BzLCBtb2RDYWNoZSk7XG4gIHJldHVybiBleHA7XG59O1xuXG52YXIgZmluZEV4cG9ydCA9IGV4cG9ydHMuZmluZEV4cG9ydCA9IGZ1bmN0aW9uIGZpbmRFeHBvcnQobW9kLCBrZXkpIHtcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4ga2V5KG1vZCk7XG4gIH0gZWxzZSBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG1vZDtcbiAgfVxuXG4gIHJldHVybiBtb2QgJiYgKHR5cGVvZiBtb2QgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1vZCkpID09PSAnb2JqZWN0JyAmJiBrZXkgPyBtb2Rba2V5XSA6IGJhYmVsSW50ZXJvcChtb2QpO1xufTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBleHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChDb21wb25lbnQpID8gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChDb21wb25lbnQsIHByb3BzKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpO1xufTtcblxudmFyIGNhbGxGb3JTdHJpbmcgPSBleHBvcnRzLmNhbGxGb3JTdHJpbmcgPSBmdW5jdGlvbiBjYWxsRm9yU3RyaW5nKHN0ckZ1biwgcHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHJGdW4gPT09ICdmdW5jdGlvbicgPyBzdHJGdW4ocHJvcHMpIDogc3RyRnVuO1xufTtcblxudmFyIGxvYWRGcm9tQ2FjaGUgPSBleHBvcnRzLmxvYWRGcm9tQ2FjaGUgPSBmdW5jdGlvbiBsb2FkRnJvbUNhY2hlKGNodW5rTmFtZSwgcHJvcHMsIG1vZENhY2hlKSB7XG4gIHJldHVybiAhaXNTZXJ2ZXIgJiYgbW9kQ2FjaGVbY2FsbEZvclN0cmluZyhjaHVua05hbWUsIHByb3BzKV07XG59O1xuXG52YXIgY2FjaGVFeHBvcnQgPSBleHBvcnRzLmNhY2hlRXhwb3J0ID0gZnVuY3Rpb24gY2FjaGVFeHBvcnQoZXhwLCBjaHVua05hbWUsIHByb3BzLCBtb2RDYWNoZSkge1xuICByZXR1cm4gbW9kQ2FjaGVbY2FsbEZvclN0cmluZyhjaHVua05hbWUsIHByb3BzKV0gPSBleHA7XG59O1xuXG52YXIgbG9hZEZyb21Qcm9taXNlQ2FjaGUgPSBleHBvcnRzLmxvYWRGcm9tUHJvbWlzZUNhY2hlID0gZnVuY3Rpb24gbG9hZEZyb21Qcm9taXNlQ2FjaGUoY2h1bmtOYW1lLCBwcm9wcywgcHJvbWlzZWNhY2hlKSB7XG4gIHJldHVybiBwcm9taXNlY2FjaGVbY2FsbEZvclN0cmluZyhjaHVua05hbWUsIHByb3BzKV07XG59O1xuXG52YXIgY2FjaGVQcm9tID0gZXhwb3J0cy5jYWNoZVByb20gPSBmdW5jdGlvbiBjYWNoZVByb20ocHIsIGNodW5rTmFtZSwgcHJvcHMsIHByb21pc2VjYWNoZSkge1xuICByZXR1cm4gcHJvbWlzZWNhY2hlW2NhbGxGb3JTdHJpbmcoY2h1bmtOYW1lLCBwcm9wcyldID0gcHI7XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oOSkobW9kdWxlKSkpXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uICgpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbGVzRnJvbUNodW5rcyA9IGV4cG9ydHMuY29uY2F0RmlsZXNBdEtleXMgPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGggPSBleHBvcnRzLmlzVW5pcXVlID0gZXhwb3J0cy5jcmVhdGVGaWxlc0J5TW9kdWxlSWQgPSBleHBvcnRzLmNyZWF0ZUZpbGVzQnlQYXRoID0gZXhwb3J0cy5mbHVzaFdlYnBhY2sgPSBleHBvcnRzLmZsdXNoQmFiZWwgPSBleHBvcnRzLmZsdXNoID0gZXhwb3J0cy5mbHVzaEZpbGVzUHVyZSA9IGV4cG9ydHMuZmx1c2hGaWxlcyA9IGV4cG9ydHMuZmx1c2hDaHVua3MgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQXBpV2l0aENzcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2NyZWF0ZUFwaVdpdGhDc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQXBpV2l0aENzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1yZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICB9XG59XG5cbnZhciBmaWxlc0J5UGF0aCA9IG51bGw7XG52YXIgZmlsZXNCeU1vZHVsZUlkID0gbnVsbDtcblxudmFyIElTX1dFQlBBQ0sgPSB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgSVNfVEVTVCA9IFwicHJvZHVjdGlvblwiID09PSAndGVzdCc7XG52YXIgZGVmYXVsdHMgPSB7XG4gIGJlZm9yZTogWydib290c3RyYXAnLCAndmVuZG9yJ10sXG4gIGFmdGVyOiBbJ21haW4nXVxufTtcblxuLyoqIFBVQkxJQyBBUEkgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN0YXRzLCBvcHRzKSB7XG4gIHJldHVybiBmbHVzaENodW5rcyhzdGF0cywgSVNfV0VCUEFDSywgb3B0cyk7XG59O1xuXG52YXIgZmx1c2hDaHVua3MgPSBmdW5jdGlvbiBmbHVzaENodW5rcyhzdGF0cywgaXNXZWJwYWNrKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgYmVmb3JlRW50cmllcyA9IG9wdHMuYmVmb3JlIHx8IGRlZmF1bHRzLmJlZm9yZTtcbiAgdmFyIGpzQmVmb3JlID0gZmlsZXNGcm9tQ2h1bmtzKGJlZm9yZUVudHJpZXMsIHN0YXRzLmFzc2V0c0J5Q2h1bmtOYW1lKTtcblxuICB2YXIgZmlsZXMgPSBvcHRzLmNodW5rTmFtZXMgPyBmaWxlc0Zyb21DaHVua3Mob3B0cy5jaHVua05hbWVzLCBzdGF0cy5hc3NldHNCeUNodW5rTmFtZSwgdHJ1ZSkgOiBmbHVzaChvcHRzLm1vZHVsZUlkcyB8fCBbXSwgc3RhdHMsIG9wdHMucm9vdERpciwgaXNXZWJwYWNrKTtcblxuICB2YXIgYWZ0ZXJFbnRyaWVzID0gb3B0cy5hZnRlciB8fCBkZWZhdWx0cy5hZnRlcjtcbiAgdmFyIGpzQWZ0ZXIgPSBmaWxlc0Zyb21DaHVua3MoYWZ0ZXJFbnRyaWVzLCBzdGF0cy5hc3NldHNCeUNodW5rTmFtZSk7XG5cbiAgcmV0dXJuICgwLCBfY3JlYXRlQXBpV2l0aENzczIuZGVmYXVsdCkoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShqc0JlZm9yZSksIF90b0NvbnN1bWFibGVBcnJheShmaWxlcyksIF90b0NvbnN1bWFibGVBcnJheShqc0FmdGVyKSksIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoanNCZWZvcmUpLCBfdG9Db25zdW1hYmxlQXJyYXkoanNBZnRlci5yZXZlcnNlKCkpLCBfdG9Db25zdW1hYmxlQXJyYXkoZmlsZXMpKSwgc3RhdHMsIG9wdHMub3V0cHV0UGF0aCk7XG59O1xuXG52YXIgZmx1c2hGaWxlcyA9IGZ1bmN0aW9uIGZsdXNoRmlsZXMoc3RhdHMsIG9wdHMpIHtcbiAgcmV0dXJuIGZsdXNoRmlsZXNQdXJlKHN0YXRzLCBJU19XRUJQQUNLLCBvcHRzKTtcbn07XG5cbnZhciBmbHVzaEZpbGVzUHVyZSA9IGZ1bmN0aW9uIGZsdXNoRmlsZXNQdXJlKHN0YXRzLCBpc1dlYnBhY2ssIG9wdHMpIHtcbiAgdmFyIGZpbGVzID0gb3B0cy5jaHVua05hbWVzID8gZmlsZXNGcm9tQ2h1bmtzKG9wdHMuY2h1bmtOYW1lcywgc3RhdHMuYXNzZXRzQnlDaHVua05hbWUpIDogZmx1c2gob3B0cy5tb2R1bGVJZHMgfHwgW10sIHN0YXRzLCBvcHRzLnJvb3REaXIsIGlzV2VicGFjayk7XG5cbiAgdmFyIGZpbHRlciA9IG9wdHMuZmlsdGVyO1xuXG4gIGlmIChmaWx0ZXIpIHtcbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZpbGVzLmZpbHRlcihmaWx0ZXIpO1xuICAgIH1cblxuICAgIHZhciByZWdleCA9IGZpbHRlciBpbnN0YW5jZW9mIFJlZ0V4cCA/IGZpbHRlciA6IG5ldyBSZWdFeHAoJy4nICsgZmlsdGVyICsgJyQnKTtcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICByZXR1cm4gcmVnZXgudGVzdChmaWxlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmaWxlcztcbn07XG5cbi8qKiBCQUJFTCBWUy4gV0VCUEFDSyBGTFVTSElORyAqL1xuXG52YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaChtb2R1bGVJZHMsIHN0YXRzLCByb290RGlyLCBpc1dlYnBhY2spIHtcbiAgcmV0dXJuICFpc1dlYnBhY2sgPyBmbHVzaEJhYmVsKG1vZHVsZUlkcywgc3RhdHMsIHJvb3REaXIpLmZpbHRlcihpc1VuaXF1ZSkgOiBmbHVzaFdlYnBhY2sobW9kdWxlSWRzLCBzdGF0cykuZmlsdGVyKGlzVW5pcXVlKTtcbn07XG5cbnZhciBmbHVzaEJhYmVsID0gZnVuY3Rpb24gZmx1c2hCYWJlbChwYXRocywgc3RhdHMsIHJvb3REaXIpIHtcbiAgaWYgKCFyb290RGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBgcm9vdERpcmAgd2FzIHByb3ZpZGVkIGFzIGFuIG9wdGlvbiB0byBgZmx1c2hDaHVua3NgLlxcbiAgICAgIFBsZWFzZSBwcm92aWRlIG9uZSBzbyBtb2R1bGVzIHJlbmRlcmVkIHNlcnZlci1zaWRlIGNhbiBiZVxcbiAgICAgIHBhaXJlZCB0byB0aGVpciB3ZWJwYWNrIGVxdWl2YWxlbnRzIGNsaWVudC1zaWRlLCBhbmQgdGhlaXJcXG4gICAgICBjb3JyZXNwb25kaW5nIGNodW5rcy4nKTtcbiAgfVxuXG4gIHZhciBkaXIgPSByb290RGlyOyAvLyBzYXRpc2Z5IGZsb3dcblxuICBmaWxlc0J5UGF0aCA9IGZpbGVzQnlQYXRoICYmICFJU19URVNUID8gZmlsZXNCeVBhdGggLy8gY2FjaGVkXG4gIDogY3JlYXRlRmlsZXNCeVBhdGgoc3RhdHMpO1xuXG4gIHJldHVybiBjb25jYXRGaWxlc0F0S2V5cyhmaWxlc0J5UGF0aCwgcGF0aHMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgocCwgZGlyKTtcbiAgfSkpO1xufTtcblxudmFyIGZsdXNoV2VicGFjayA9IGZ1bmN0aW9uIGZsdXNoV2VicGFjayhpZHMsIHN0YXRzKSB7XG4gIGZpbGVzQnlNb2R1bGVJZCA9IGZpbGVzQnlNb2R1bGVJZCAmJiAhSVNfVEVTVCA/IGZpbGVzQnlNb2R1bGVJZCAvLyBjYWNoZWRcbiAgOiBjcmVhdGVGaWxlc0J5TW9kdWxlSWQoc3RhdHMpO1xuXG4gIHJldHVybiBjb25jYXRGaWxlc0F0S2V5cyhmaWxlc0J5TW9kdWxlSWQsIGlkcyk7XG59O1xuXG4vKiogQ1JFQVRFIEZJTEVTIE1BUCAqL1xuXG52YXIgY3JlYXRlRmlsZXNCeVBhdGggPSBmdW5jdGlvbiBjcmVhdGVGaWxlc0J5UGF0aChfcmVmKSB7XG4gIHZhciBjaHVua3MgPSBfcmVmLmNodW5rcyxcbiAgICAgIG1vZHVsZXMgPSBfcmVmLm1vZHVsZXM7XG5cbiAgdmFyIGZpbGVzQnlDaHVuayA9IGNodW5rcy5yZWR1Y2UoZnVuY3Rpb24gKGNodW5rcywgY2h1bmspIHtcbiAgICBjaHVua3NbY2h1bmsuaWRdID0gY2h1bmsuZmlsZXM7XG4gICAgcmV0dXJuIGNodW5rcztcbiAgfSwge30pO1xuXG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoZmlsZXNCeVBhdGgsIG1vZHVsZSkge1xuICAgIHZhciBmaWxlUGF0aCA9IG1vZHVsZS5uYW1lO1xuICAgIHZhciBmaWxlcyA9IGNvbmNhdEZpbGVzQXRLZXlzKGZpbGVzQnlDaHVuaywgbW9kdWxlLmNodW5rcyk7XG5cbiAgICBmaWxlc0J5UGF0aFtmaWxlUGF0aF0gPSBmaWxlcy5maWx0ZXIoaXNVbmlxdWUpO1xuICAgIHJldHVybiBmaWxlc0J5UGF0aDtcbiAgfSwge30pO1xufTtcblxudmFyIGNyZWF0ZUZpbGVzQnlNb2R1bGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUZpbGVzQnlNb2R1bGVJZChzdGF0cykge1xuICB2YXIgZmlsZXNCeVBhdGggPSBjcmVhdGVGaWxlc0J5UGF0aChzdGF0cyk7XG5cbiAgcmV0dXJuIHN0YXRzLm1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChmaWxlc0J5TW9kdWxlSWQsIG1vZHVsZSkge1xuICAgIHZhciBmaWxlUGF0aCA9IG1vZHVsZS5uYW1lO1xuICAgIHZhciBpZCA9IG1vZHVsZS5pZDtcblxuICAgIGZpbGVzQnlNb2R1bGVJZFtpZF0gPSBmaWxlc0J5UGF0aFtmaWxlUGF0aF07XG4gICAgcmV0dXJuIGZpbGVzQnlNb2R1bGVJZDtcbiAgfSwge30pO1xufTtcblxuLyoqIEhFTFBFUlMgKi9cblxudmFyIGlzVW5pcXVlID0gZnVuY3Rpb24gaXNVbmlxdWUodiwgaSwgc2VsZikge1xuICByZXR1cm4gc2VsZi5pbmRleE9mKHYpID09PSBpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhdGggPSBmdW5jdGlvbiBub3JtYWxpemVQYXRoKHBhdGgsIHJvb3REaXIpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZShyb290RGlyLCAnLicpLnJlcGxhY2UoL1xcLmpzJC8sICcnKSArICcuanMnO1xufTtcblxudmFyIGNvbmNhdEZpbGVzQXRLZXlzID0gZnVuY3Rpb24gY29uY2F0RmlsZXNBdEtleXMoaW5wdXRGaWxlc01hcCwgcGF0aHNPcklkc09yQ2h1bmtzKSB7XG4gIHJldHVybiBwYXRoc09ySWRzT3JDaHVua3MucmVkdWNlKGZ1bmN0aW9uIChmaWxlcywga2V5KSB7XG4gICAgcmV0dXJuIGZpbGVzLmNvbmNhdChpbnB1dEZpbGVzTWFwW2tleV0gfHwgW10pO1xuICB9LCBbXSk7XG59O1xuXG52YXIgZmlsZXNGcm9tQ2h1bmtzID0gZnVuY3Rpb24gZmlsZXNGcm9tQ2h1bmtzKGNodW5rTmFtZXMsIGFzc2V0cywgY2hlY2tDaHVua05hbWVzKSB7XG4gIHZhciBfcmVmMjtcblxuICB2YXIgaGFzQ2h1bmsgPSBmdW5jdGlvbiBoYXNDaHVuayhlbnRyeSkge1xuICAgIHZhciByZXN1bHQgPSAhIShhc3NldHNbZW50cnldIHx8IGFzc2V0c1tlbnRyeSArICctJ10pO1xuICAgIGlmICghcmVzdWx0ICYmIGNoZWNrQ2h1bmtOYW1lcykge1xuICAgICAgY29uc29sZS53YXJuKCdbRkxVU0ggQ0hVTktTXTogVW5hYmxlIHRvIGZpbmQgJyArIGVudHJ5ICsgJyBpbiBXZWJwYWNrIGNodW5rcy4gUGxlYXNlIGNoZWNrIHVzYWdlIG9mIEJhYmVsIHBsdWdpbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBlbnRyeVRvRmlsZXMgPSBmdW5jdGlvbiBlbnRyeVRvRmlsZXMoZW50cnkpIHtcbiAgICByZXR1cm4gYXNzZXRzW2VudHJ5XSB8fCBhc3NldHNbZW50cnkgKyAnLSddO1xuICB9O1xuXG4gIHJldHVybiAoX3JlZjIgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYyLCBfdG9Db25zdW1hYmxlQXJyYXkoY2h1bmtOYW1lcy5maWx0ZXIoaGFzQ2h1bmspLm1hcChlbnRyeVRvRmlsZXMpKSk7XG59O1xuXG4vKiogRVhQT1JUUyBGT1IgVEVTVFMgKi9cblxuZXhwb3J0cy5mbHVzaENodW5rcyA9IGZsdXNoQ2h1bmtzO1xuZXhwb3J0cy5mbHVzaEZpbGVzID0gZmx1c2hGaWxlcztcbmV4cG9ydHMuZmx1c2hGaWxlc1B1cmUgPSBmbHVzaEZpbGVzUHVyZTtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcbmV4cG9ydHMuZmx1c2hCYWJlbCA9IGZsdXNoQmFiZWw7XG5leHBvcnRzLmZsdXNoV2VicGFjayA9IGZsdXNoV2VicGFjaztcbmV4cG9ydHMuY3JlYXRlRmlsZXNCeVBhdGggPSBjcmVhdGVGaWxlc0J5UGF0aDtcbmV4cG9ydHMuY3JlYXRlRmlsZXNCeU1vZHVsZUlkID0gY3JlYXRlRmlsZXNCeU1vZHVsZUlkO1xuZXhwb3J0cy5pc1VuaXF1ZSA9IGlzVW5pcXVlO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gbm9ybWFsaXplUGF0aDtcbmV4cG9ydHMuY29uY2F0RmlsZXNBdEtleXMgPSBjb25jYXRGaWxlc0F0S2V5cztcbmV4cG9ydHMuZmlsZXNGcm9tQ2h1bmtzID0gZmlsZXNGcm9tQ2h1bmtzO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUNzc0hhc2ggPSBleHBvcnRzLnN0eWxlc0FzU3RyaW5nID0gZXhwb3J0cy5pc0NzcyA9IGV4cG9ydHMuaXNKcyA9IGV4cG9ydHMuZ2V0SnNGaWxlUmVnZXggPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9mcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX2ZzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG5cbnZhciBERVYgPSBcInByb2R1Y3Rpb25cIiA9PT0gJ2RldmVsb3BtZW50JztcblxuLyoqIENSRUFURSBBUEkgV0lUSCBDU1MgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGZpbGVzLCBmaWxlc09yZGVyZWRGb3JDc3MsIHN0YXRzLCBvdXRwdXRQYXRoKSB7XG4gIHZhciBwdWJsaWNQYXRoID0gc3RhdHMucHVibGljUGF0aC5yZXBsYWNlKC9cXC8kLywgJycpO1xuICB2YXIgcmVnZXggPSBnZXRKc0ZpbGVSZWdleChmaWxlcyk7XG4gIHZhciBzY3JpcHRzID0gZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgcmV0dXJuIGlzSnMocmVnZXgsIGZpbGUpO1xuICB9KTtcbiAgdmFyIHN0eWxlc2hlZXRzID0gZmlsZXNPcmRlcmVkRm9yQ3NzLmZpbHRlcihpc0Nzcyk7XG4gIHZhciBjc3NIYXNoUmF3ID0gY3JlYXRlQ3NzSGFzaChzdGF0cyk7XG5cbiAgdmFyIGFwaSA9IHtcbiAgICAvLyAxKSBVc2UgYXMgUmVhY3QgY29tcG9uZW50cyB1c2luZyBSZWFjdERPTS5yZW5kZXJUb1N0YXRpY01hcmt1cCwgZWc6XG4gICAgLy8gPGh0bWw+PFN0eWxlcyAvPjxKcyAvPjxodG1sPlxuICAgIEpzOiBmdW5jdGlvbiBKcygpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsIHNjcmlwdHMubWFwKGZ1bmN0aW9uIChmaWxlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnLCB7XG4gICAgICAgICAgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcsXG4gICAgICAgICAgc3JjOiBwdWJsaWNQYXRoICsgJy8nICsgZmlsZSxcbiAgICAgICAgICBrZXk6IGtleVxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIFN0eWxlczogZnVuY3Rpb24gU3R5bGVzKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCwgc3R5bGVzaGVldHMubWFwKGZ1bmN0aW9uIChmaWxlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdsaW5rJywgeyByZWw6ICdzdHlsZXNoZWV0JywgaHJlZjogcHVibGljUGF0aCArICcvJyArIGZpbGUsIGtleToga2V5IH0pO1xuICAgICAgfSkpO1xuICAgIH0sXG5cbiAgICAvLyAyKSBVc2UgYXMgc3RyaW5nLCBlZzogYCR7c3R5bGVzfSAke2pzfWBcbiAgICBqczoge1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGxhenktbG9hZGVkIGluIGNhc2Ugbm90IHVzZWRcbiAgICAgICAgICBzY3JpcHRzLm1hcChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuICc8c2NyaXB0IHR5cGU9XFwndGV4dC9qYXZhc2NyaXB0XFwnIHNyYz1cXCcnICsgcHVibGljUGF0aCArICcvJyArIGZpbGUgKyAnXFwnPjwvc2NyaXB0Pic7XG4gICAgICAgICAgfSkuam9pbignXFxuJylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0eWxlczoge1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGxhenktbG9hZGVkIGluIGNhc2Ugbm90IHVzZWRcbiAgICAgICAgICBzdHlsZXNoZWV0cy5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiAnPGxpbmsgcmVsPVxcJ3N0eWxlc2hlZXRcXCcgaHJlZj1cXCcnICsgcHVibGljUGF0aCArICcvJyArIGZpbGUgKyAnXFwnIC8+JztcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyAzKSBFbWJlZCB0aGUgcmF3IGNzcyB3aXRob3V0IG5lZWRpbmcgdG8gbG9hZCBhbm90aGVyIGZpbGUuXG4gICAgLy8gVXNlIGFzIGEgUmVhY3QgY29tcG9uZW50ICg8Q3NzIC8+KSBvciBhIHN0cmluZyAoYCR7Y3NzfWApOlxuICAgIC8vIE5PVEU6IGR1cmluZyBkZXZlbG9wbWVudCwgSE1SIHJlcXVpcmVzIHN0eWxlc2hlZXRzLlxuICAgIENzczogZnVuY3Rpb24gQ3NzKCkge1xuICAgICAgcmV0dXJuIERFViA/IGFwaS5TdHlsZXMoKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgbnVsbCwgc3R5bGVzQXNTdHJpbmcoc3R5bGVzaGVldHMsIG91dHB1dFBhdGgpKSk7XG4gICAgfSxcbiAgICBjc3M6IHtcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBsYXp5LWxvYWRlZCBpbiBjYXNlIG5vdCB1c2VkXG4gICAgICAgICAgREVWID8gYXBpLnN0eWxlcy50b1N0cmluZygpIDogJzxzdHlsZT4nICsgc3R5bGVzQXNTdHJpbmcoc3R5bGVzaGVldHMsIG91dHB1dFBhdGgpICsgJzwvc3R5bGU+J1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyA0KSBuYW1lcyBvZiBmaWxlcyB3aXRob3V0IHB1YmxpY1BhdGggb3Igb3V0cHV0UGF0aCBwcmVmaXhlZDpcbiAgICBzY3JpcHRzOiBzY3JpcHRzLFxuICAgIHN0eWxlc2hlZXRzOiBzdHlsZXNoZWV0cyxcblxuICAgIC8vIDUpIGZvciBjb21wbGV0ZW5lc3MgcHJvdmlkZSB0aGUgcGF0aHMgZXZlbiB0aG91Z2ggdGhleSB3ZXJlIGlucHV0czpcbiAgICBwdWJsaWNQYXRoOiBwdWJsaWNQYXRoLFxuICAgIG91dHB1dFBhdGg6IG91dHB1dFBhdGgsXG5cbiAgICAvLyA2KSBzcGVjaWFsIGdvb2RuZXNzIGZvciBkdWFsLWZpbGUgaW1wb3J0KClcbiAgICBjc3NIYXNoUmF3OiBjc3NIYXNoUmF3LFxuICAgIENzc0hhc2g6IGZ1bmN0aW9uIENzc0hhc2goKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcsIHtcbiAgICAgICAgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcsXG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogSlNPTi5zdHJpbmdpZnkoY3NzSGFzaFJhdykgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjc3NIYXNoOiB7XG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnPHNjcmlwdCB0eXBlPVxcJ3RleHQvamF2YXNjcmlwdFxcJz53aW5kb3cuX19DU1NfQ0hVTktTX189ICcgKyBKU09OLnN0cmluZ2lmeShjc3NIYXNoUmF3KSArICc8L3NjcmlwdD4nO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gYXBpO1xufTtcblxuLyoqIEhFTFBFUlMgKi9cblxudmFyIGdldEpzRmlsZVJlZ2V4ID0gZXhwb3J0cy5nZXRKc0ZpbGVSZWdleCA9IGZ1bmN0aW9uIGdldEpzRmlsZVJlZ2V4KGZpbGVzKSB7XG4gIHZhciBpc1VzaW5nRXh0cmFjdENzc0NodW5rID0gISFmaWxlcy5maW5kKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGUuaW5jbHVkZXMoJ25vX2NzcycpO1xuICB9KTtcbiAgcmV0dXJuIGlzVXNpbmdFeHRyYWN0Q3NzQ2h1bmsgPyAvXFwubm9fY3NzXFwuanMkLyA6IC9cXC5qcyQvO1xufTtcblxudmFyIGlzSnMgPSBleHBvcnRzLmlzSnMgPSBmdW5jdGlvbiBpc0pzKHJlZ2V4LCBmaWxlKSB7XG4gIHJldHVybiByZWdleC50ZXN0KGZpbGUpICYmICEvXFwuaG90LXVwZGF0ZVxcLmpzJC8udGVzdChmaWxlKTtcbn07XG5cbnZhciBpc0NzcyA9IGV4cG9ydHMuaXNDc3MgPSBmdW5jdGlvbiBpc0NzcyhmaWxlKSB7XG4gIHJldHVybiAoL1xcLmNzcyQvLnRlc3QoZmlsZSlcbiAgKTtcbn07XG5cbnZhciBzdHlsZXNBc1N0cmluZyA9IGV4cG9ydHMuc3R5bGVzQXNTdHJpbmcgPSBmdW5jdGlvbiBzdHlsZXNBc1N0cmluZyhzdHlsZXNoZWV0cywgb3V0cHV0UGF0aCkge1xuICBpZiAoIW91dHB1dFBhdGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGBvdXRwdXRQYXRoYCB3YXMgcHJvdmlkZWQgYXMgYW4gb3B0aW9uIHRvIGBmbHVzaENodW5rc2AuIFxcbiAgICAgIFBsZWFzZSBwcm92aWRlIG9uZSBzbyBzdHlsZXNoZWV0cyBjYW4gYmUgcmVhZCBmcm9tIHRoZVxcbiAgICAgIGZpbGUgc3lzdGVtIHNpbmNlIHlvdVxcJ3JlIGVtYmVkZGluZyB0aGUgY3NzIGFzIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgdmFyIHBhdGggPSBvdXRwdXRQYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgcmV0dXJuIHN0eWxlc2hlZXRzLm1hcChmdW5jdGlvbiAoZmlsZSkge1xuICAgIHZhciBmaWxlUGF0aCA9IHBhdGggKyAnLycgKyBmaWxlO1xuICAgIHJldHVybiBfZnMyLmRlZmF1bHQucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpO1xuICB9KS5qb2luKCdcXG4nKS5yZXBsYWNlKC9cXC9cXCojIHNvdXJjZU1hcHBpbmdVUkw9LitcXCpcXC8vZywgJycpOyAvLyBoaWRlIHByb2Qgc291cmNlbWFwIGVyclxufTtcblxudmFyIGNyZWF0ZUNzc0hhc2ggPSBleHBvcnRzLmNyZWF0ZUNzc0hhc2ggPSBmdW5jdGlvbiBjcmVhdGVDc3NIYXNoKF9yZWYpIHtcbiAgdmFyIGFzc2V0c0J5Q2h1bmtOYW1lID0gX3JlZi5hc3NldHNCeUNodW5rTmFtZSxcbiAgICAgIHB1YmxpY1BhdGggPSBfcmVmLnB1YmxpY1BhdGg7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhc3NldHNCeUNodW5rTmFtZSkucmVkdWNlKGZ1bmN0aW9uIChoYXNoLCBuYW1lKSB7XG4gICAgaWYgKCFhc3NldHNCeUNodW5rTmFtZVtuYW1lXSB8fCAhYXNzZXRzQnlDaHVua05hbWVbbmFtZV0uZmluZCkgcmV0dXJuIGhhc2g7XG4gICAgdmFyIGZpbGUgPSBhc3NldHNCeUNodW5rTmFtZVtuYW1lXS5maW5kKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICByZXR1cm4gZmlsZS5lbmRzV2l0aCgnLmNzcycpO1xuICAgIH0pO1xuICAgIGlmIChmaWxlKSBoYXNoW25hbWVdID0gJycgKyBwdWJsaWNQYXRoICsgZmlsZTtcbiAgICByZXR1cm4gaGFzaDtcbiAgfSwge30pO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9CdXR0b24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxudmFyIF9CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnV0dG9uKTtcblxudmFyIF9MaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBfTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0KTtcblxudmFyIF9CbG9nUG9zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG52YXIgX0Jsb2dQb3N0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jsb2dQb3N0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBgQXBwYCBjb21wb25lbnQgaXMgdGhlIGVudHJ5IHBvaW50IGZvciB0aGUgcmVhY3QgYXBwLlxuICogSXQgaXMgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBhcyB3ZWxsIGFzIG9uIHRoZSBzZXJ2ZXIuXG4gKlxuICogWW91IGNhbiBzdGFydCBkZXZlbG9waW5nIHlvdXIgcmVhY3QgYXBwIGhlcmUuXG4gKi9cbnZhciBBcHAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhBcHAsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQXBwKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFwcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFwcCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBcHAsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2gxJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ1RISVMgSVMgQU4gQVBQJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0J1dHRvbjIuZGVmYXVsdCwgbnVsbCksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jsb2dQb3N0Mi5kZWZhdWx0LCBudWxsKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQmxvZ1Bvc3QyLmRlZmF1bHQsIG51bGwpLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaXN0Mi5kZWZhdWx0LCBudWxsKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBcHA7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBcHA7XG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogQSBMaXN0XG4gKi9cbnZhciBCdXR0b24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnV0dG9uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdidXR0b24nLFxuICAgICAgICB7IG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ3lhY2xpY2tlZG1lJyk7XG4gICAgICAgICAgfSB9LFxuICAgICAgICAnQ2xpY2sgbWUhJ1xuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnV0dG9uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQnV0dG9uO1xuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX0xpc3RJdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfTGlzdEl0ZW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdEl0ZW0pO1xuXG52YXIgX1Byb2R1Y3RJbmZvID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cbnZhciBfUHJvZHVjdEluZm8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvZHVjdEluZm8pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogQSBMaXN0XG4gKi9cbnZhciBMaXN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTGlzdCwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMaXN0KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMaXN0LCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGJ1bmNoT2ZQcm9kdWN0cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRpemVkUHJvcHMgPSBbXCJuYW1lXCIsIFwiZGVzY3JpcHRpb25cIiwgXCJwcmljZVwiXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTAwMDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYnVuY2hPZlByb2R1Y3RzLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Byb2R1Y3RJbmZvMi5kZWZhdWx0LCB7IGtleTogaSwgbmFtZTogJ1RoaW5nICcgKyBpLCBkZXNjcmlwdGlvbjogJ1RoaXMgcHJvZHVjdCBpcyBhd2Vzb21lIScsIHByaWNlOiBpICogMTAsIG5vblRlbXBsYXRpemVkOiAnVEhJUyBURVhUIFNIT1VMRCBORVZFUiBDSEFOR0UnIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnaDEnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAnSGVyZVxcJ3MgbXkgbGlzdCdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGJ1bmNoT2ZQcm9kdWN0c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMaXN0O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdDtcblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEEgTGlzdFxuICovXG52YXIgTGlzdEl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMaXN0SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMaXN0SXRlbSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RJdGVtKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpc3RJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTGlzdEl0ZW0sIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ0hBSEFIQSdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTGlzdEl0ZW07XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBMaXN0SXRlbTtcblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb2R1Y3RJbmZvID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb2R1Y3RJbmZvLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9kdWN0SW5mbygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZHVjdEluZm8pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQcm9kdWN0SW5mby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2R1Y3RJbmZvKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZHVjdEluZm8sIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3AnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3Ryb25nJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnUHJvZHVjdCBOYW1lOiAnXG4gICAgICAgICAgKSxcbiAgICAgICAgICB0aGlzLnByb3BzLm5hbWVcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3AnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3Ryb25nJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnUHJvZHVjdCBEZXNjcmlwdGlvbjogJ1xuICAgICAgICAgICksXG4gICAgICAgICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvblxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAncCcsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzdHJvbmcnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdQcmljZTogJ1xuICAgICAgICAgICksXG4gICAgICAgICAgJyQnLFxuICAgICAgICAgIHRoaXMucHJvcHMucHJpY2VcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3AnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3Ryb25nJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnTm9uLVRlbXBsYXRpemVkIFByb3A6ICdcbiAgICAgICAgICApLFxuICAgICAgICAgIHRoaXMucHJvcHMubm9uVGVtcGxhdGl6ZWRcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2hyJywgbnVsbClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb2R1Y3RJbmZvO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUHJvZHVjdEluZm87XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfQmxvZ0NvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxudmFyIF9CbG9nQ29udGVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CbG9nQ29udGVudCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBBIExpc3RcbiAqL1xudmFyIEJsb2dQb3N0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQmxvZ1Bvc3QsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQmxvZ1Bvc3QoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9nUG9zdCk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCbG9nUG9zdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2dQb3N0KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJsb2dQb3N0LCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdoMScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICdUaGlzIGlzIGEgZ3JlYXQgYmxvZyBwb3N0ISdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnaDInLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAnVG9kYXkgaXMgJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5kYXksXG4gICAgICAgICAgICAgICAgICAgICcuJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jsb2dDb250ZW50Mi5kZWZhdWx0LCBudWxsKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnRoaW5nXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCbG9nUG9zdDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2dQb3N0O1xuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEEgTGlzdFxuICovXG52YXIgQmxvZ0NvbnRlbnQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQmxvZ0NvbnRlbnQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJsb2dDb250ZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9nQ29udGVudCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2dDb250ZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvZ0NvbnRlbnQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCbG9nQ29udGVudCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBudWxsLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAncCcsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnRGVhciBEaWFyeSwnXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdwJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdUb2RheSBJIHRyaWVkIHRvIHVuZGVyc3RhbmQgUmVhY3QgMTYgc291cmNlIGNvZGUuIEl0IHdhcyBhIHJvbGxlcmNvYXN0ZXIgb2YgZW1vdGlvbi4gTm93IElcXCdtIG1ha2luZyB0aGUgbmV4dCBiaWcgd2ViIGFwcC4gRXZlcnlvbmUgd2lsbCBsb3ZlIGl0LidcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmxvZ0NvbnRlbnQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCbG9nQ29udGVudDtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBhcHAuc2VydmVyLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDUyYjE0YjFmZTRhMWEyZmJmNzUyIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJyZWFjdFwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmx1c2hNb2R1bGVJZHMgPSBleHBvcnRzLmZsdXNoQ2h1bmtOYW1lcyA9IGV4cG9ydHMuTU9EVUxFX0lEUyA9IGV4cG9ydHMuQ0hVTktfTkFNRVMgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmRlZmF1bHQgPSByZXF1aXJlVW5pdmVyc2FsTW9kdWxlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgQ0hVTktfTkFNRVMgPSBleHBvcnRzLkNIVU5LX05BTUVTID0gbmV3IFNldCgpO1xudmFyIE1PRFVMRV9JRFMgPSBleHBvcnRzLk1PRFVMRV9JRFMgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVVbml2ZXJzYWxNb2R1bGUodW5pdmVyc2FsQ29uZmlnLCBvcHRpb25zLCBwcm9wcywgcHJldlByb3BzKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSxcbiAgICAgIF9vcHRpb25zJHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX29wdGlvbnMkdGltZW91dCA9PT0gdW5kZWZpbmVkID8gMTUwMDAgOiBfb3B0aW9ucyR0aW1lb3V0LFxuICAgICAgb25Mb2FkID0gb3B0aW9ucy5vbkxvYWQsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yLFxuICAgICAgaXNEeW5hbWljID0gb3B0aW9ucy5pc0R5bmFtaWMsXG4gICAgICBtb2RDYWNoZSA9IG9wdGlvbnMubW9kQ2FjaGUsXG4gICAgICBwcm9tQ2FjaGUgPSBvcHRpb25zLnByb21DYWNoZTtcblxuXG4gIHZhciBjb25maWcgPSBnZXRDb25maWcoaXNEeW5hbWljLCB1bml2ZXJzYWxDb25maWcsIG9wdGlvbnMsIHByb3BzKTtcbiAgdmFyIGNodW5rTmFtZSA9IGNvbmZpZy5jaHVua05hbWUsXG4gICAgICBwYXRoID0gY29uZmlnLnBhdGgsXG4gICAgICByZXNvbHZlID0gY29uZmlnLnJlc29sdmUsXG4gICAgICBsb2FkID0gY29uZmlnLmxvYWQ7XG5cbiAgdmFyIGFzeW5jT25seSA9ICFwYXRoICYmICFyZXNvbHZlO1xuXG4gIHZhciByZXF1aXJlU3luYyA9IGZ1bmN0aW9uIHJlcXVpcmVTeW5jKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGV4cCA9ICgwLCBfdXRpbHMubG9hZEZyb21DYWNoZSkoY2h1bmtOYW1lLCBwcm9wcywgbW9kQ2FjaGUpO1xuXG4gICAgaWYgKCFleHApIHtcbiAgICAgIHZhciBtb2QgPSB2b2lkIDA7XG5cbiAgICAgIGlmICghKDAsIF91dGlscy5pc1dlYnBhY2spKCkgJiYgcGF0aCkge1xuICAgICAgICB2YXIgbW9kdWxlUGF0aCA9ICgwLCBfdXRpbHMuY2FsbEZvclN0cmluZykocGF0aCwgcHJvcHMpIHx8ICcnO1xuICAgICAgICBtb2QgPSAoMCwgX3V0aWxzLnRyeVJlcXVpcmUpKG1vZHVsZVBhdGgpO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX3V0aWxzLmlzV2VicGFjaykoKSAmJiByZXNvbHZlKSB7XG4gICAgICAgIHZhciB3ZWFrSWQgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKHJlc29sdmUsIHByb3BzKTtcblxuICAgICAgICBpZiAoX193ZWJwYWNrX21vZHVsZXNfX1t3ZWFrSWRdKSB7XG4gICAgICAgICAgbW9kID0gKDAsIF91dGlscy50cnlSZXF1aXJlKSh3ZWFrSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgZXhwID0gKDAsIF91dGlscy5yZXNvbHZlRXhwb3J0KShtb2QsIGtleSwgb25Mb2FkLCBjaHVua05hbWUsIHByb3BzLCBjb250ZXh0LCBtb2RDYWNoZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cDtcbiAgfTtcblxuICB2YXIgcmVxdWlyZUFzeW5jID0gZnVuY3Rpb24gcmVxdWlyZUFzeW5jKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGV4cCA9ICgwLCBfdXRpbHMubG9hZEZyb21DYWNoZSkoY2h1bmtOYW1lLCBwcm9wcywgbW9kQ2FjaGUpO1xuICAgIGlmIChleHApIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXhwKTtcblxuICAgIHZhciBjYWNoZWRQcm9taXNlID0gKDAsIF91dGlscy5sb2FkRnJvbVByb21pc2VDYWNoZSkoY2h1bmtOYW1lLCBwcm9wcywgcHJvbUNhY2hlKTtcbiAgICBpZiAoY2FjaGVkUHJvbWlzZSkgcmV0dXJuIGNhY2hlZFByb21pc2U7XG5cbiAgICB2YXIgcHJvbSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdChlcnJvcikge1xuICAgICAgICBlcnJvciA9IGVycm9yIHx8IG5ldyBFcnJvcigndGltZW91dCBleGNlZWRlZCcpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgIHZhciBfaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICB2YXIgaW5mbyA9IHsgaXNTZXJ2ZXI6IF9pc1NlcnZlciB9O1xuICAgICAgICAgIG9uRXJyb3IoZXJyb3IsIGluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHJlaihlcnJvcik7XG4gICAgICB9O1xuXG4gICAgICAvLyBjb25zdCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dChyZWplY3QsIHRpbWVvdXQpXG4gICAgICB2YXIgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQocmVqZWN0LCB0aW1lb3V0KTtcblxuICAgICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKG1vZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXG4gICAgICAgIHZhciBleHAgPSAoMCwgX3V0aWxzLnJlc29sdmVFeHBvcnQpKG1vZCwga2V5LCBvbkxvYWQsIGNodW5rTmFtZSwgcHJvcHMsIGNvbnRleHQsIG1vZENhY2hlKTtcbiAgICAgICAgaWYgKGV4cCkgcmV0dXJuIHJlcyhleHApO1xuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2V4cG9ydCBub3QgZm91bmQnKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdCA9IGxvYWQocHJvcHMsIHsgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfSk7XG5cbiAgICAgIC8vIGlmIGxvYWQgZG9lc24ndCByZXR1cm4gYSBwcm9taXNlLCBpdCBtdXN0IGNhbGwgcmVzb2x2ZUltcG9ydFxuICAgICAgLy8gaXRzZWxmLiBNb3N0IGNvbW1vbiBpcyB0aGUgcHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBiZWxvdy5cbiAgICAgIGlmICghcmVxdWVzdCB8fCB0eXBlb2YgcmVxdWVzdC50aGVuICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gICAgICByZXF1ZXN0LnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcblxuICAgICgwLCBfdXRpbHMuY2FjaGVQcm9tKShwcm9tLCBjaHVua05hbWUsIHByb3BzLCBwcm9tQ2FjaGUpO1xuICAgIHJldHVybiBwcm9tO1xuICB9O1xuXG4gIHZhciBhZGRNb2R1bGUgPSBmdW5jdGlvbiBhZGRNb2R1bGUocHJvcHMpIHtcbiAgICBpZiAoX3V0aWxzLmlzU2VydmVyIHx8IF91dGlscy5pc1Rlc3QpIHtcbiAgICAgIGlmIChjaHVua05hbWUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKGNodW5rTmFtZSwgcHJvcHMpO1xuICAgICAgICBpZiAobmFtZSkgQ0hVTktfTkFNRVMuYWRkKG5hbWUpO1xuICAgICAgICBpZiAoIV91dGlscy5pc1Rlc3QpIHJldHVybjsgLy8gbWFrZXMgdGVzdHMgd2F5IHNtYWxsZXIgdG8gcnVuIGJvdGgga2luZHNcbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNXZWJwYWNrKSgpKSB7XG4gICAgICAgIHZhciB3ZWFrSWQgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKHJlc29sdmUsIHByb3BzKTtcbiAgICAgICAgaWYgKHdlYWtJZCkgTU9EVUxFX0lEUy5hZGQod2Vha0lkKTtcbiAgICAgIH0gZWxzZSBpZiAoISgwLCBfdXRpbHMuaXNXZWJwYWNrKSgpKSB7XG4gICAgICAgIHZhciBtb2R1bGVQYXRoID0gKDAsIF91dGlscy5jYWxsRm9yU3RyaW5nKShwYXRoLCBwcm9wcyk7XG4gICAgICAgIGlmIChtb2R1bGVQYXRoKSBNT0RVTEVfSURTLmFkZChtb2R1bGVQYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZShuZXh0LCBwcmV2KSB7XG4gICAgaWYgKGFzeW5jT25seSkge1xuICAgICAgdmFyIF9jYWNoZUtleSA9ICgwLCBfdXRpbHMuY2FsbEZvclN0cmluZykoY2h1bmtOYW1lLCBuZXh0KTtcblxuICAgICAgdmFyIF9jb25maWcgPSBnZXRDb25maWcoaXNEeW5hbWljLCB1bml2ZXJzYWxDb25maWcsIG9wdGlvbnMsIHByZXYpO1xuICAgICAgdmFyIF9wcmV2Q2FjaGVLZXkgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKF9jb25maWcuY2h1bmtOYW1lLCBwcmV2KTtcblxuICAgICAgcmV0dXJuIF9jYWNoZUtleSAhPT0gX3ByZXZDYWNoZUtleTtcbiAgICB9XG5cbiAgICAvLyBiZWxvdyBpcyB3aGF0IHRoZSBiYWJlbC1wbHVnaW4gdHJpZ2dlcnNcblxuICAgIGlmICghcHJldlByb3BzKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgY2FjaGVLZXkgPSAoMCwgX3V0aWxzLmNhbGxGb3JTdHJpbmcpKGNodW5rTmFtZSwgcHJvcHMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IGdldENvbmZpZyhpc0R5bmFtaWMsIHVuaXZlcnNhbENvbmZpZywgb3B0aW9ucywgcHJldlByb3BzKTtcbiAgICB2YXIgcHJldkNhY2hlS2V5ID0gKDAsIF91dGlscy5jYWxsRm9yU3RyaW5nKShjb25maWcuY2h1bmtOYW1lLCBwcmV2UHJvcHMpO1xuXG4gICAgcmV0dXJuIGNhY2hlS2V5ICE9PSBwcmV2Q2FjaGVLZXk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlU3luYzogcmVxdWlyZVN5bmMsXG4gICAgcmVxdWlyZUFzeW5jOiByZXF1aXJlQXN5bmMsXG4gICAgYWRkTW9kdWxlOiBhZGRNb2R1bGUsXG4gICAgc2hvdWxkVXBkYXRlOiBzaG91bGRVcGRhdGUsXG4gICAgYXN5bmNPbmx5OiBhc3luY09ubHlcbiAgfTtcbn1cblxudmFyIGZsdXNoQ2h1bmtOYW1lcyA9IGV4cG9ydHMuZmx1c2hDaHVua05hbWVzID0gZnVuY3Rpb24gZmx1c2hDaHVua05hbWVzKCkge1xuICB2YXIgY2h1bmtzID0gQXJyYXkuZnJvbShDSFVOS19OQU1FUyk7XG4gIENIVU5LX05BTUVTLmNsZWFyKCk7XG4gIHJldHVybiBjaHVua3M7XG59O1xuXG52YXIgZmx1c2hNb2R1bGVJZHMgPSBleHBvcnRzLmZsdXNoTW9kdWxlSWRzID0gZnVuY3Rpb24gZmx1c2hNb2R1bGVJZHMoKSB7XG4gIHZhciBpZHMgPSBBcnJheS5mcm9tKE1PRFVMRV9JRFMpO1xuICBNT0RVTEVfSURTLmNsZWFyKCk7XG4gIHJldHVybiBpZHM7XG59O1xuXG52YXIgZ2V0Q29uZmlnID0gZnVuY3Rpb24gZ2V0Q29uZmlnKGlzRHluYW1pYywgdW5pdmVyc2FsQ29uZmlnLCBvcHRpb25zLCBwcm9wcykge1xuICBpZiAoaXNEeW5hbWljKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml2ZXJzYWxDb25maWcgPT09ICdmdW5jdGlvbicgPyB1bml2ZXJzYWxDb25maWcocHJvcHMpIDogdW5pdmVyc2FsQ29uZmlnO1xuICB9XG5cbiAgdmFyIGxvYWQgPSB0eXBlb2YgdW5pdmVyc2FsQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdW5pdmVyc2FsQ29uZmlnIDogLy8gJEZsb3dJc3N1ZVxuICBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuaXZlcnNhbENvbmZpZztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGZpbGU6ICdkZWZhdWx0JyxcbiAgICBpZDogb3B0aW9ucy5pZCB8fCAnZGVmYXVsdCcsXG4gICAgY2h1bmtOYW1lOiBvcHRpb25zLmNodW5rTmFtZSB8fCAnZGVmYXVsdCcsXG4gICAgcmVzb2x2ZTogb3B0aW9ucy5yZXNvbHZlIHx8ICcnLFxuICAgIHBhdGg6IG9wdGlvbnMucGF0aCB8fCAnJyxcbiAgICBsb2FkOiBsb2FkXG4gIH07XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC11bml2ZXJzYWwtY29tcG9uZW50L2Rpc3QvcmVxdWlyZVVuaXZlcnNhbE1vZHVsZS5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYmFiZWwtcG9seWZpbGxcIlxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4vLyBpbXBvcnQgUmVhY3RDQyBmcm9tICcuLi8uLi9kZXZlbG9wbWVudEJ1aWxkJztcbi8vIGltcG9ydCBSZWFjdENDIGZyb20gJy4uLy4uL3Byb2R1Y3Rpb25CdWlsZCc7XG5pbXBvcnQgUmVhY3RDQyBmcm9tIFwicmVhY3QtY29tcG9uZW50LWNhY2hpbmdcIjtcbmltcG9ydCB7IGZsdXNoQ2h1bmtOYW1lcyB9IGZyb20gXCJyZWFjdC11bml2ZXJzYWwtY29tcG9uZW50L3NlcnZlclwiO1xuaW1wb3J0IGZsdXNoQ2h1bmtzIGZyb20gXCJ3ZWJwYWNrLWZsdXNoLWNodW5rc1wiO1xuXG5pbXBvcnQgQXBwIGZyb20gXCIuLi9zaGFyZWQvQXBwXCI7XG5cbi8vIGNhbiBwYXNzIGluIG1heC1zaXplLCBvdGhlcndpc2UgZGVmYXVsdHMgdG8gMSBtaWxsaW9uXG4vLyBjb25zdCBjYWNoZSA9IG5ldyBSZWFjdENDLkNvbXBvbmVudENhY2hlKCk7XG4vLyBpbXBvcnQgcmVkaXMgZnJvbSAncmVkaXMnO1xuLy8gY29uc3QgY2FjaGUgPSByZWRpcy5jcmVhdGVDbGllbnQoKTtcbi8vIGltcG9ydCBtZW1jYWNoZWQgZnJvbSAnbWVtY2FjaGVkJztcbi8vIGNvbnN0IGNhY2hlID0gbmV3IG1lbWNhY2hlZCgnbG9jYWxob3N0OjExMjExJyk7XG5cbi8vIEZvcmNlIE5vZGVTdHJlYW1cbi8vIGltcG9ydCBjcmVhdGVDYWNoZVN0cmVhbSBmcm9tICcuL2NhY2hlU3RyZWFtJztcblxuY29uc3QgaHRtbFN0YXJ0ID1cbiAgJzxodG1sPjxoZWFkPjx0aXRsZT5QYWdlPC90aXRsZT48L2hlYWQ+PGJvZHk+PGRpdiBpZD1cInJlYWN0LXJvb3RcIj4nO1xuY29uc3QgaHRtbEVuZCA9IFwiPC9kaXY+PC9ib2R5PjwvaHRtbD5cIjtcblxuY29uc3Qgc3RyZWFtaW5nU3RhcnQgPSB7XG4gIHNsaWNlU3RhcnRDb3VudDogaHRtbFN0YXJ0Lmxlbmd0aFxufTtcbi8qKlxuICogQHBhcmFtIGNsaWVudFN0YXRzIFBhcmFtZXRlciBwYXNzZWQgYnkgaG90IHNlcnZlciBtaWRkbGV3YXJlXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICh7IGNsaWVudFN0YXRzIH0pID0+IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyBOZWVkIFRvIENvbWUgYmFjayBUbyBJZiBTdGF0ZW1lbnRcbiAgLy8gaWYoZmFsc2Upe1xuICAvLyBjb25zdCBjYWNoZVN0cmVhbSA9IGNyZWF0ZUNhY2hlU3RyZWFtKGNhY2hlLCBzdHJlYW1pbmdTdGFydCk7XG4gIC8vIGNhY2hlU3RyZWFtLnBpcGUocmVzKTtcbiAgLy8gY2FjaGVTdHJlYW0ud3JpdGUoaHRtbFN0YXJ0KTtcblxuICAvLyBSZWFjdENDLnJlbmRlclRvTm9kZVN0cmVhbSg8QXBwIC8+LCBjYWNoZSwgcmVzKTtcbiAgLy8gc3RyZWFtLnBpcGUoY2FjaGVTdHJlYW0sIHsgZW5kOiBmYWxzZSB9KTtcbiAgLy8gc3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgLy8gICBjYWNoZVN0cmVhbS5lbmQoaHRtbEVuZCk7XG4gIC8vIH0pO1xuICAvLyB9XG4gIC8vIGVsc2UgaWYgKHRydWUpe1xuICBjb25zdCBhcHAgPSA8QXBwIC8+O1xuICBjb25zdCBzdGFydF9jYWNoZWQgPSBwcm9jZXNzLmhydGltZSgpO1xuXG4gIGNvbnN0IGFwcFN0cmluZyA9IGF3YWl0IFJlYWN0Q0MucmVuZGVyVG9TdHJpbmcoYXBwKTtcbiAgY29uc3QgZW5kX2NhY2hlZCA9IHByb2Nlc3MuaHJ0aW1lKHN0YXJ0X2NhY2hlZCk7XG4gIGNvbnNvbGUuaW5mbyhcbiAgICBcIkNhY2hlZCByZW5kZXIgdGltZTogJWRzICVkbXNcIixcbiAgICBlbmRfY2FjaGVkWzBdLFxuICAgIGVuZF9jYWNoZWRbMV0gLyAxMDAwMDAwXG4gICk7XG4gIGNvbnN0IGNodW5rTmFtZXMgPSBmbHVzaENodW5rTmFtZXMoKTtcbiAgY29uc3QgeyBqcywgc3R5bGVzLCBjc3NIYXNoIH0gPSBmbHVzaENodW5rcyhjbGllbnRTdGF0cywgeyBjaHVua05hbWVzIH0pO1xuXG4gIHJlcy5yZW5kZXIoXCJpbmRleFwiLCB7XG4gICAgYXBwU3RyaW5nLFxuICAgIGpzLFxuICAgIHN0eWxlcyxcbiAgICBjc3NIYXNoXG4gIH0pO1xuICAvLyB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NlcnZlci9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LWNvbXBvbmVudC1jYWNoaW5nXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwicmVhY3QtY29tcG9uZW50LWNhY2hpbmdcIlxuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmx1c2hNb2R1bGVJZHM6IHJlcXVpcmUoJy4vZGlzdC9yZXF1aXJlVW5pdmVyc2FsTW9kdWxlJykuZmx1c2hNb2R1bGVJZHMsXG4gIGZsdXNoQ2h1bmtOYW1lczogcmVxdWlyZSgnLi9kaXN0L3JlcXVpcmVVbml2ZXJzYWxNb2R1bGUnKS5mbHVzaENodW5rTmFtZXNcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC11bml2ZXJzYWwtY29tcG9uZW50L3NlcnZlci5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FjaGVQcm9tID0gZXhwb3J0cy5sb2FkRnJvbVByb21pc2VDYWNoZSA9IGV4cG9ydHMuY2FjaGVFeHBvcnQgPSBleHBvcnRzLmxvYWRGcm9tQ2FjaGUgPSBleHBvcnRzLmNhbGxGb3JTdHJpbmcgPSBleHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBleHBvcnRzLmZpbmRFeHBvcnQgPSBleHBvcnRzLnJlc29sdmVFeHBvcnQgPSBleHBvcnRzLnJlcXVpcmVCeUlkID0gZXhwb3J0cy50cnlSZXF1aXJlID0gZXhwb3J0cy5EZWZhdWx0RXJyb3IgPSBleHBvcnRzLkRlZmF1bHRMb2FkaW5nID0gZXhwb3J0cy5iYWJlbEludGVyb3AgPSBleHBvcnRzLmlzV2VicGFjayA9IGV4cG9ydHMuaXNTZXJ2ZXIgPSBleHBvcnRzLmlzVGVzdCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBpc1Rlc3QgPSBleHBvcnRzLmlzVGVzdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCc7XG52YXIgaXNTZXJ2ZXIgPSBleHBvcnRzLmlzU2VydmVyID0gISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgaXNXZWJwYWNrID0gZXhwb3J0cy5pc1dlYnBhY2sgPSBmdW5jdGlvbiBpc1dlYnBhY2soKSB7XG4gIHJldHVybiB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyAhPT0gJ3VuZGVmaW5lZCc7XG59O1xudmFyIGJhYmVsSW50ZXJvcCA9IGV4cG9ydHMuYmFiZWxJbnRlcm9wID0gZnVuY3Rpb24gYmFiZWxJbnRlcm9wKG1vZCkge1xuICByZXR1cm4gbW9kICYmICh0eXBlb2YgbW9kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihtb2QpKSA9PT0gJ29iamVjdCcgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QuZGVmYXVsdCA6IG1vZDtcbn07XG5cbnZhciBEZWZhdWx0TG9hZGluZyA9IGV4cG9ydHMuRGVmYXVsdExvYWRpbmcgPSBmdW5jdGlvbiBEZWZhdWx0TG9hZGluZygpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIG51bGwsXG4gICAgJ0xvYWRpbmcuLi4nXG4gICk7XG59O1xudmFyIERlZmF1bHRFcnJvciA9IGV4cG9ydHMuRGVmYXVsdEVycm9yID0gZnVuY3Rpb24gRGVmYXVsdEVycm9yKF9yZWYpIHtcbiAgdmFyIGVycm9yID0gX3JlZi5lcnJvcjtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIG51bGwsXG4gICAgJ0Vycm9yOiAnLFxuICAgIGVycm9yICYmIGVycm9yLm1lc3NhZ2VcbiAgKTtcbn07XG5cbnZhciB0cnlSZXF1aXJlID0gZXhwb3J0cy50cnlSZXF1aXJlID0gZnVuY3Rpb24gdHJ5UmVxdWlyZShpZCkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlQnlJZChpZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIHdhcm4gaWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIHJlcXVpcmluZyB0aGUgY2h1bmsgZHVyaW5nIGRldmVsb3BtZW50XG4gICAgLy8gdGhpcyBjYW4gc29tZXRpbWVzIGxlYWQgdGhlIHNlcnZlciB0byByZW5kZXIgdGhlIGxvYWRpbmcgY29tcG9uZW50LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgY29uc29sZS53YXJuKCdjaHVuayBub3QgYXZhaWxhYmxlIGZvciBzeW5jaHJvbm91cyByZXF1aXJlIHlldDogJyArIGlkICsgJzogJyArIGVyci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciByZXF1aXJlQnlJZCA9IGV4cG9ydHMucmVxdWlyZUJ5SWQgPSBmdW5jdGlvbiByZXF1aXJlQnlJZChpZCkge1xuICBpZiAoIWlzV2VicGFjaygpICYmIHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbW9kdWxlLnJlcXVpcmUoaWQpO1xuICB9XG5cbiAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufTtcblxudmFyIHJlc29sdmVFeHBvcnQgPSBleHBvcnRzLnJlc29sdmVFeHBvcnQgPSBmdW5jdGlvbiByZXNvbHZlRXhwb3J0KG1vZCwga2V5LCBvbkxvYWQsIGNodW5rTmFtZSwgcHJvcHMsIGNvbnRleHQsIG1vZENhY2hlKSB7XG4gIHZhciBpc1N5bmMgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IGZhbHNlO1xuXG4gIHZhciBleHAgPSBmaW5kRXhwb3J0KG1vZCwga2V5KTtcbiAgaWYgKG9uTG9hZCAmJiBtb2QpIHtcbiAgICB2YXIgX2lzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgdmFyIGluZm8gPSB7IGlzU2VydmVyOiBfaXNTZXJ2ZXIsIGlzU3luYzogaXNTeW5jIH07XG4gICAgb25Mb2FkKG1vZCwgaW5mbywgcHJvcHMsIGNvbnRleHQpO1xuICB9XG4gIGlmIChjaHVua05hbWUgJiYgZXhwKSBjYWNoZUV4cG9ydChleHAsIGNodW5rTmFtZSwgcHJvcHMsIG1vZENhY2hlKTtcbiAgcmV0dXJuIGV4cDtcbn07XG5cbnZhciBmaW5kRXhwb3J0ID0gZXhwb3J0cy5maW5kRXhwb3J0ID0gZnVuY3Rpb24gZmluZEV4cG9ydChtb2QsIGtleSkge1xuICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBrZXkobW9kKTtcbiAgfSBlbHNlIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbW9kO1xuICB9XG5cbiAgcmV0dXJuIG1vZCAmJiAodHlwZW9mIG1vZCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kKSkgPT09ICdvYmplY3QnICYmIGtleSA/IG1vZFtrZXldIDogYmFiZWxJbnRlcm9wKG1vZCk7XG59O1xuXG52YXIgY3JlYXRlRWxlbWVudCA9IGV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KENvbXBvbmVudCkgPyBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcyk7XG59O1xuXG52YXIgY2FsbEZvclN0cmluZyA9IGV4cG9ydHMuY2FsbEZvclN0cmluZyA9IGZ1bmN0aW9uIGNhbGxGb3JTdHJpbmcoc3RyRnVuLCBwcm9wcykge1xuICByZXR1cm4gdHlwZW9mIHN0ckZ1biA9PT0gJ2Z1bmN0aW9uJyA/IHN0ckZ1bihwcm9wcykgOiBzdHJGdW47XG59O1xuXG52YXIgbG9hZEZyb21DYWNoZSA9IGV4cG9ydHMubG9hZEZyb21DYWNoZSA9IGZ1bmN0aW9uIGxvYWRGcm9tQ2FjaGUoY2h1bmtOYW1lLCBwcm9wcywgbW9kQ2FjaGUpIHtcbiAgcmV0dXJuICFpc1NlcnZlciAmJiBtb2RDYWNoZVtjYWxsRm9yU3RyaW5nKGNodW5rTmFtZSwgcHJvcHMpXTtcbn07XG5cbnZhciBjYWNoZUV4cG9ydCA9IGV4cG9ydHMuY2FjaGVFeHBvcnQgPSBmdW5jdGlvbiBjYWNoZUV4cG9ydChleHAsIGNodW5rTmFtZSwgcHJvcHMsIG1vZENhY2hlKSB7XG4gIHJldHVybiBtb2RDYWNoZVtjYWxsRm9yU3RyaW5nKGNodW5rTmFtZSwgcHJvcHMpXSA9IGV4cDtcbn07XG5cbnZhciBsb2FkRnJvbVByb21pc2VDYWNoZSA9IGV4cG9ydHMubG9hZEZyb21Qcm9taXNlQ2FjaGUgPSBmdW5jdGlvbiBsb2FkRnJvbVByb21pc2VDYWNoZShjaHVua05hbWUsIHByb3BzLCBwcm9taXNlY2FjaGUpIHtcbiAgcmV0dXJuIHByb21pc2VjYWNoZVtjYWxsRm9yU3RyaW5nKGNodW5rTmFtZSwgcHJvcHMpXTtcbn07XG5cbnZhciBjYWNoZVByb20gPSBleHBvcnRzLmNhY2hlUHJvbSA9IGZ1bmN0aW9uIGNhY2hlUHJvbShwciwgY2h1bmtOYW1lLCBwcm9wcywgcHJvbWlzZWNhY2hlKSB7XG4gIHJldHVybiBwcm9taXNlY2FjaGVbY2FsbEZvclN0cmluZyhjaHVua05hbWUsIHByb3BzKV0gPSBwcjtcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXZlcnNhbC1jb21wb25lbnQvZGlzdC91dGlscy5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbGVzRnJvbUNodW5rcyA9IGV4cG9ydHMuY29uY2F0RmlsZXNBdEtleXMgPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGggPSBleHBvcnRzLmlzVW5pcXVlID0gZXhwb3J0cy5jcmVhdGVGaWxlc0J5TW9kdWxlSWQgPSBleHBvcnRzLmNyZWF0ZUZpbGVzQnlQYXRoID0gZXhwb3J0cy5mbHVzaFdlYnBhY2sgPSBleHBvcnRzLmZsdXNoQmFiZWwgPSBleHBvcnRzLmZsdXNoID0gZXhwb3J0cy5mbHVzaEZpbGVzUHVyZSA9IGV4cG9ydHMuZmx1c2hGaWxlcyA9IGV4cG9ydHMuZmx1c2hDaHVua3MgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQXBpV2l0aENzcyA9IHJlcXVpcmUoJy4vY3JlYXRlQXBpV2l0aENzcycpO1xuXG52YXIgX2NyZWF0ZUFwaVdpdGhDc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQXBpV2l0aENzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgZmlsZXNCeVBhdGggPSBudWxsO1xudmFyIGZpbGVzQnlNb2R1bGVJZCA9IG51bGw7XG5cbnZhciBJU19XRUJQQUNLID0gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gIT09ICd1bmRlZmluZWQnO1xudmFyIElTX1RFU1QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnO1xudmFyIGRlZmF1bHRzID0ge1xuICBiZWZvcmU6IFsnYm9vdHN0cmFwJywgJ3ZlbmRvciddLFxuICBhZnRlcjogWydtYWluJ11cbn07XG5cbi8qKiBQVUJMSUMgQVBJICovXG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdGF0cywgb3B0cykge1xuICByZXR1cm4gZmx1c2hDaHVua3Moc3RhdHMsIElTX1dFQlBBQ0ssIG9wdHMpO1xufTtcblxudmFyIGZsdXNoQ2h1bmtzID0gZnVuY3Rpb24gZmx1c2hDaHVua3Moc3RhdHMsIGlzV2VicGFjaykge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgdmFyIGJlZm9yZUVudHJpZXMgPSBvcHRzLmJlZm9yZSB8fCBkZWZhdWx0cy5iZWZvcmU7XG4gIHZhciBqc0JlZm9yZSA9IGZpbGVzRnJvbUNodW5rcyhiZWZvcmVFbnRyaWVzLCBzdGF0cy5hc3NldHNCeUNodW5rTmFtZSk7XG5cbiAgdmFyIGZpbGVzID0gb3B0cy5jaHVua05hbWVzID8gZmlsZXNGcm9tQ2h1bmtzKG9wdHMuY2h1bmtOYW1lcywgc3RhdHMuYXNzZXRzQnlDaHVua05hbWUsIHRydWUpIDogZmx1c2gob3B0cy5tb2R1bGVJZHMgfHwgW10sIHN0YXRzLCBvcHRzLnJvb3REaXIsIGlzV2VicGFjayk7XG5cbiAgdmFyIGFmdGVyRW50cmllcyA9IG9wdHMuYWZ0ZXIgfHwgZGVmYXVsdHMuYWZ0ZXI7XG4gIHZhciBqc0FmdGVyID0gZmlsZXNGcm9tQ2h1bmtzKGFmdGVyRW50cmllcywgc3RhdHMuYXNzZXRzQnlDaHVua05hbWUpO1xuXG4gIHJldHVybiAoMCwgX2NyZWF0ZUFwaVdpdGhDc3MyLmRlZmF1bHQpKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoanNCZWZvcmUpLCBfdG9Db25zdW1hYmxlQXJyYXkoZmlsZXMpLCBfdG9Db25zdW1hYmxlQXJyYXkoanNBZnRlcikpLCBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGpzQmVmb3JlKSwgX3RvQ29uc3VtYWJsZUFycmF5KGpzQWZ0ZXIucmV2ZXJzZSgpKSwgX3RvQ29uc3VtYWJsZUFycmF5KGZpbGVzKSksIHN0YXRzLCBvcHRzLm91dHB1dFBhdGgpO1xufTtcblxudmFyIGZsdXNoRmlsZXMgPSBmdW5jdGlvbiBmbHVzaEZpbGVzKHN0YXRzLCBvcHRzKSB7XG4gIHJldHVybiBmbHVzaEZpbGVzUHVyZShzdGF0cywgSVNfV0VCUEFDSywgb3B0cyk7XG59O1xuXG52YXIgZmx1c2hGaWxlc1B1cmUgPSBmdW5jdGlvbiBmbHVzaEZpbGVzUHVyZShzdGF0cywgaXNXZWJwYWNrLCBvcHRzKSB7XG4gIHZhciBmaWxlcyA9IG9wdHMuY2h1bmtOYW1lcyA/IGZpbGVzRnJvbUNodW5rcyhvcHRzLmNodW5rTmFtZXMsIHN0YXRzLmFzc2V0c0J5Q2h1bmtOYW1lKSA6IGZsdXNoKG9wdHMubW9kdWxlSWRzIHx8IFtdLCBzdGF0cywgb3B0cy5yb290RGlyLCBpc1dlYnBhY2spO1xuXG4gIHZhciBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcblxuICBpZiAoZmlsdGVyKSB7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmaWxlcy5maWx0ZXIoZmlsdGVyKTtcbiAgICB9XG5cbiAgICB2YXIgcmVnZXggPSBmaWx0ZXIgaW5zdGFuY2VvZiBSZWdFeHAgPyBmaWx0ZXIgOiBuZXcgUmVnRXhwKCcuJyArIGZpbHRlciArICckJyk7XG4gICAgcmV0dXJuIGZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmlsZXM7XG59O1xuXG4vKiogQkFCRUwgVlMuIFdFQlBBQ0sgRkxVU0hJTkcgKi9cblxudmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2gobW9kdWxlSWRzLCBzdGF0cywgcm9vdERpciwgaXNXZWJwYWNrKSB7XG4gIHJldHVybiAhaXNXZWJwYWNrID8gZmx1c2hCYWJlbChtb2R1bGVJZHMsIHN0YXRzLCByb290RGlyKS5maWx0ZXIoaXNVbmlxdWUpIDogZmx1c2hXZWJwYWNrKG1vZHVsZUlkcywgc3RhdHMpLmZpbHRlcihpc1VuaXF1ZSk7XG59O1xuXG52YXIgZmx1c2hCYWJlbCA9IGZ1bmN0aW9uIGZsdXNoQmFiZWwocGF0aHMsIHN0YXRzLCByb290RGlyKSB7XG4gIGlmICghcm9vdERpcikge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gYHJvb3REaXJgIHdhcyBwcm92aWRlZCBhcyBhbiBvcHRpb24gdG8gYGZsdXNoQ2h1bmtzYC5cXG4gICAgICBQbGVhc2UgcHJvdmlkZSBvbmUgc28gbW9kdWxlcyByZW5kZXJlZCBzZXJ2ZXItc2lkZSBjYW4gYmVcXG4gICAgICBwYWlyZWQgdG8gdGhlaXIgd2VicGFjayBlcXVpdmFsZW50cyBjbGllbnQtc2lkZSwgYW5kIHRoZWlyXFxuICAgICAgY29ycmVzcG9uZGluZyBjaHVua3MuJyk7XG4gIH1cblxuICB2YXIgZGlyID0gcm9vdERpcjsgLy8gc2F0aXNmeSBmbG93XG5cbiAgZmlsZXNCeVBhdGggPSBmaWxlc0J5UGF0aCAmJiAhSVNfVEVTVCA/IGZpbGVzQnlQYXRoIC8vIGNhY2hlZFxuICA6IGNyZWF0ZUZpbGVzQnlQYXRoKHN0YXRzKTtcblxuICByZXR1cm4gY29uY2F0RmlsZXNBdEtleXMoZmlsZXNCeVBhdGgsIHBhdGhzLm1hcChmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBub3JtYWxpemVQYXRoKHAsIGRpcik7XG4gIH0pKTtcbn07XG5cbnZhciBmbHVzaFdlYnBhY2sgPSBmdW5jdGlvbiBmbHVzaFdlYnBhY2soaWRzLCBzdGF0cykge1xuICBmaWxlc0J5TW9kdWxlSWQgPSBmaWxlc0J5TW9kdWxlSWQgJiYgIUlTX1RFU1QgPyBmaWxlc0J5TW9kdWxlSWQgLy8gY2FjaGVkXG4gIDogY3JlYXRlRmlsZXNCeU1vZHVsZUlkKHN0YXRzKTtcblxuICByZXR1cm4gY29uY2F0RmlsZXNBdEtleXMoZmlsZXNCeU1vZHVsZUlkLCBpZHMpO1xufTtcblxuLyoqIENSRUFURSBGSUxFUyBNQVAgKi9cblxudmFyIGNyZWF0ZUZpbGVzQnlQYXRoID0gZnVuY3Rpb24gY3JlYXRlRmlsZXNCeVBhdGgoX3JlZikge1xuICB2YXIgY2h1bmtzID0gX3JlZi5jaHVua3MsXG4gICAgICBtb2R1bGVzID0gX3JlZi5tb2R1bGVzO1xuXG4gIHZhciBmaWxlc0J5Q2h1bmsgPSBjaHVua3MucmVkdWNlKGZ1bmN0aW9uIChjaHVua3MsIGNodW5rKSB7XG4gICAgY2h1bmtzW2NodW5rLmlkXSA9IGNodW5rLmZpbGVzO1xuICAgIHJldHVybiBjaHVua3M7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGZpbGVzQnlQYXRoLCBtb2R1bGUpIHtcbiAgICB2YXIgZmlsZVBhdGggPSBtb2R1bGUubmFtZTtcbiAgICB2YXIgZmlsZXMgPSBjb25jYXRGaWxlc0F0S2V5cyhmaWxlc0J5Q2h1bmssIG1vZHVsZS5jaHVua3MpO1xuXG4gICAgZmlsZXNCeVBhdGhbZmlsZVBhdGhdID0gZmlsZXMuZmlsdGVyKGlzVW5pcXVlKTtcbiAgICByZXR1cm4gZmlsZXNCeVBhdGg7XG4gIH0sIHt9KTtcbn07XG5cbnZhciBjcmVhdGVGaWxlc0J5TW9kdWxlSWQgPSBmdW5jdGlvbiBjcmVhdGVGaWxlc0J5TW9kdWxlSWQoc3RhdHMpIHtcbiAgdmFyIGZpbGVzQnlQYXRoID0gY3JlYXRlRmlsZXNCeVBhdGgoc3RhdHMpO1xuXG4gIHJldHVybiBzdGF0cy5tb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoZmlsZXNCeU1vZHVsZUlkLCBtb2R1bGUpIHtcbiAgICB2YXIgZmlsZVBhdGggPSBtb2R1bGUubmFtZTtcbiAgICB2YXIgaWQgPSBtb2R1bGUuaWQ7XG5cbiAgICBmaWxlc0J5TW9kdWxlSWRbaWRdID0gZmlsZXNCeVBhdGhbZmlsZVBhdGhdO1xuICAgIHJldHVybiBmaWxlc0J5TW9kdWxlSWQ7XG4gIH0sIHt9KTtcbn07XG5cbi8qKiBIRUxQRVJTICovXG5cbnZhciBpc1VuaXF1ZSA9IGZ1bmN0aW9uIGlzVW5pcXVlKHYsIGksIHNlbGYpIHtcbiAgcmV0dXJuIHNlbGYuaW5kZXhPZih2KSA9PT0gaTtcbn07XG5cbnZhciBub3JtYWxpemVQYXRoID0gZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoLCByb290RGlyKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2Uocm9vdERpciwgJy4nKS5yZXBsYWNlKC9cXC5qcyQvLCAnJykgKyAnLmpzJztcbn07XG5cbnZhciBjb25jYXRGaWxlc0F0S2V5cyA9IGZ1bmN0aW9uIGNvbmNhdEZpbGVzQXRLZXlzKGlucHV0RmlsZXNNYXAsIHBhdGhzT3JJZHNPckNodW5rcykge1xuICByZXR1cm4gcGF0aHNPcklkc09yQ2h1bmtzLnJlZHVjZShmdW5jdGlvbiAoZmlsZXMsIGtleSkge1xuICAgIHJldHVybiBmaWxlcy5jb25jYXQoaW5wdXRGaWxlc01hcFtrZXldIHx8IFtdKTtcbiAgfSwgW10pO1xufTtcblxudmFyIGZpbGVzRnJvbUNodW5rcyA9IGZ1bmN0aW9uIGZpbGVzRnJvbUNodW5rcyhjaHVua05hbWVzLCBhc3NldHMsIGNoZWNrQ2h1bmtOYW1lcykge1xuICB2YXIgX3JlZjI7XG5cbiAgdmFyIGhhc0NodW5rID0gZnVuY3Rpb24gaGFzQ2h1bmsoZW50cnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gISEoYXNzZXRzW2VudHJ5XSB8fCBhc3NldHNbZW50cnkgKyAnLSddKTtcbiAgICBpZiAoIXJlc3VsdCAmJiBjaGVja0NodW5rTmFtZXMpIHtcbiAgICAgIGNvbnNvbGUud2FybignW0ZMVVNIIENIVU5LU106IFVuYWJsZSB0byBmaW5kICcgKyBlbnRyeSArICcgaW4gV2VicGFjayBjaHVua3MuIFBsZWFzZSBjaGVjayB1c2FnZSBvZiBCYWJlbCBwbHVnaW4uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgZW50cnlUb0ZpbGVzID0gZnVuY3Rpb24gZW50cnlUb0ZpbGVzKGVudHJ5KSB7XG4gICAgcmV0dXJuIGFzc2V0c1tlbnRyeV0gfHwgYXNzZXRzW2VudHJ5ICsgJy0nXTtcbiAgfTtcblxuICByZXR1cm4gKF9yZWYyID0gW10pLmNvbmNhdC5hcHBseShfcmVmMiwgX3RvQ29uc3VtYWJsZUFycmF5KGNodW5rTmFtZXMuZmlsdGVyKGhhc0NodW5rKS5tYXAoZW50cnlUb0ZpbGVzKSkpO1xufTtcblxuLyoqIEVYUE9SVFMgRk9SIFRFU1RTICovXG5cbmV4cG9ydHMuZmx1c2hDaHVua3MgPSBmbHVzaENodW5rcztcbmV4cG9ydHMuZmx1c2hGaWxlcyA9IGZsdXNoRmlsZXM7XG5leHBvcnRzLmZsdXNoRmlsZXNQdXJlID0gZmx1c2hGaWxlc1B1cmU7XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLmZsdXNoQmFiZWwgPSBmbHVzaEJhYmVsO1xuZXhwb3J0cy5mbHVzaFdlYnBhY2sgPSBmbHVzaFdlYnBhY2s7XG5leHBvcnRzLmNyZWF0ZUZpbGVzQnlQYXRoID0gY3JlYXRlRmlsZXNCeVBhdGg7XG5leHBvcnRzLmNyZWF0ZUZpbGVzQnlNb2R1bGVJZCA9IGNyZWF0ZUZpbGVzQnlNb2R1bGVJZDtcbmV4cG9ydHMuaXNVbmlxdWUgPSBpc1VuaXF1ZTtcbmV4cG9ydHMubm9ybWFsaXplUGF0aCA9IG5vcm1hbGl6ZVBhdGg7XG5leHBvcnRzLmNvbmNhdEZpbGVzQXRLZXlzID0gY29uY2F0RmlsZXNBdEtleXM7XG5leHBvcnRzLmZpbGVzRnJvbUNodW5rcyA9IGZpbGVzRnJvbUNodW5rcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spLWZsdXNoLWNodW5rcy9kaXN0L2ZsdXNoQ2h1bmtzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVDc3NIYXNoID0gZXhwb3J0cy5zdHlsZXNBc1N0cmluZyA9IGV4cG9ydHMuaXNDc3MgPSBleHBvcnRzLmlzSnMgPSBleHBvcnRzLmdldEpzRmlsZVJlZ2V4ID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZnMgPSByZXF1aXJlKCdmcycpO1xuXG52YXIgX2ZzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIERFViA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG4vKiogQ1JFQVRFIEFQSSBXSVRIIENTUyAqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoZmlsZXMsIGZpbGVzT3JkZXJlZEZvckNzcywgc3RhdHMsIG91dHB1dFBhdGgpIHtcbiAgdmFyIHB1YmxpY1BhdGggPSBzdGF0cy5wdWJsaWNQYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gIHZhciByZWdleCA9IGdldEpzRmlsZVJlZ2V4KGZpbGVzKTtcbiAgdmFyIHNjcmlwdHMgPSBmaWxlcy5maWx0ZXIoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICByZXR1cm4gaXNKcyhyZWdleCwgZmlsZSk7XG4gIH0pO1xuICB2YXIgc3R5bGVzaGVldHMgPSBmaWxlc09yZGVyZWRGb3JDc3MuZmlsdGVyKGlzQ3NzKTtcbiAgdmFyIGNzc0hhc2hSYXcgPSBjcmVhdGVDc3NIYXNoKHN0YXRzKTtcblxuICB2YXIgYXBpID0ge1xuICAgIC8vIDEpIFVzZSBhcyBSZWFjdCBjb21wb25lbnRzIHVzaW5nIFJlYWN0RE9NLnJlbmRlclRvU3RhdGljTWFya3VwLCBlZzpcbiAgICAvLyA8aHRtbD48U3R5bGVzIC8+PEpzIC8+PGh0bWw+XG4gICAgSnM6IGZ1bmN0aW9uIEpzKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHNjcmlwdHMubWFwKGZ1bmN0aW9uIChmaWxlLCBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnLFxuICAgICAgICAgICAgc3JjOiBwdWJsaWNQYXRoICsgJy8nICsgZmlsZSxcbiAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sXG4gICAgU3R5bGVzOiBmdW5jdGlvbiBTdHlsZXMoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc3R5bGVzaGVldHMubWFwKGZ1bmN0aW9uIChmaWxlLCBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnLCB7IHJlbDogJ3N0eWxlc2hlZXQnLCBocmVmOiBwdWJsaWNQYXRoICsgJy8nICsgZmlsZSwga2V5OiBrZXkgfSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvLyAyKSBVc2UgYXMgc3RyaW5nLCBlZzogYCR7c3R5bGVzfSAke2pzfWBcbiAgICBqczoge1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGxhenktbG9hZGVkIGluIGNhc2Ugbm90IHVzZWRcbiAgICAgICAgICBzY3JpcHRzLm1hcChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuICc8c2NyaXB0IHR5cGU9XFwndGV4dC9qYXZhc2NyaXB0XFwnIHNyYz1cXCcnICsgcHVibGljUGF0aCArICcvJyArIGZpbGUgKyAnXFwnPjwvc2NyaXB0Pic7XG4gICAgICAgICAgfSkuam9pbignXFxuJylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0eWxlczoge1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGxhenktbG9hZGVkIGluIGNhc2Ugbm90IHVzZWRcbiAgICAgICAgICBzdHlsZXNoZWV0cy5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiAnPGxpbmsgcmVsPVxcJ3N0eWxlc2hlZXRcXCcgaHJlZj1cXCcnICsgcHVibGljUGF0aCArICcvJyArIGZpbGUgKyAnXFwnIC8+JztcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyAzKSBFbWJlZCB0aGUgcmF3IGNzcyB3aXRob3V0IG5lZWRpbmcgdG8gbG9hZCBhbm90aGVyIGZpbGUuXG4gICAgLy8gVXNlIGFzIGEgUmVhY3QgY29tcG9uZW50ICg8Q3NzIC8+KSBvciBhIHN0cmluZyAoYCR7Y3NzfWApOlxuICAgIC8vIE5PVEU6IGR1cmluZyBkZXZlbG9wbWVudCwgSE1SIHJlcXVpcmVzIHN0eWxlc2hlZXRzLlxuICAgIENzczogZnVuY3Rpb24gQ3NzKCkge1xuICAgICAgcmV0dXJuIERFViA/IGFwaS5TdHlsZXMoKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzdHlsZScsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBzdHlsZXNBc1N0cmluZyhzdHlsZXNoZWV0cywgb3V0cHV0UGF0aClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9LFxuICAgIGNzczoge1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGxhenktbG9hZGVkIGluIGNhc2Ugbm90IHVzZWRcbiAgICAgICAgICBERVYgPyBhcGkuc3R5bGVzLnRvU3RyaW5nKCkgOiAnPHN0eWxlPicgKyBzdHlsZXNBc1N0cmluZyhzdHlsZXNoZWV0cywgb3V0cHV0UGF0aCkgKyAnPC9zdHlsZT4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIDQpIG5hbWVzIG9mIGZpbGVzIHdpdGhvdXQgcHVibGljUGF0aCBvciBvdXRwdXRQYXRoIHByZWZpeGVkOlxuICAgIHNjcmlwdHM6IHNjcmlwdHMsXG4gICAgc3R5bGVzaGVldHM6IHN0eWxlc2hlZXRzLFxuXG4gICAgLy8gNSkgZm9yIGNvbXBsZXRlbmVzcyBwcm92aWRlIHRoZSBwYXRocyBldmVuIHRob3VnaCB0aGV5IHdlcmUgaW5wdXRzOlxuICAgIHB1YmxpY1BhdGg6IHB1YmxpY1BhdGgsXG4gICAgb3V0cHV0UGF0aDogb3V0cHV0UGF0aCxcblxuICAgIC8vIDYpIHNwZWNpYWwgZ29vZG5lc3MgZm9yIGR1YWwtZmlsZSBpbXBvcnQoKVxuICAgIGNzc0hhc2hSYXc6IGNzc0hhc2hSYXcsXG4gICAgQ3NzSGFzaDogZnVuY3Rpb24gQ3NzSGFzaCgpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jywge1xuICAgICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyxcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBKU09OLnN0cmluZ2lmeShjc3NIYXNoUmF3KSB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNzc0hhc2g6IHtcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICc8c2NyaXB0IHR5cGU9XFwndGV4dC9qYXZhc2NyaXB0XFwnPndpbmRvdy5fX0NTU19DSFVOS1NfXz0gJyArIEpTT04uc3RyaW5naWZ5KGNzc0hhc2hSYXcpICsgJzwvc2NyaXB0Pic7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBhcGk7XG59O1xuXG4vKiogSEVMUEVSUyAqL1xuXG52YXIgZ2V0SnNGaWxlUmVnZXggPSBleHBvcnRzLmdldEpzRmlsZVJlZ2V4ID0gZnVuY3Rpb24gZ2V0SnNGaWxlUmVnZXgoZmlsZXMpIHtcbiAgdmFyIGlzVXNpbmdFeHRyYWN0Q3NzQ2h1bmsgPSAhIWZpbGVzLmZpbmQoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS5pbmNsdWRlcygnbm9fY3NzJyk7XG4gIH0pO1xuICByZXR1cm4gaXNVc2luZ0V4dHJhY3RDc3NDaHVuayA/IC9cXC5ub19jc3NcXC5qcyQvIDogL1xcLmpzJC87XG59O1xuXG52YXIgaXNKcyA9IGV4cG9ydHMuaXNKcyA9IGZ1bmN0aW9uIGlzSnMocmVnZXgsIGZpbGUpIHtcbiAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZSkgJiYgIS9cXC5ob3QtdXBkYXRlXFwuanMkLy50ZXN0KGZpbGUpO1xufTtcblxudmFyIGlzQ3NzID0gZXhwb3J0cy5pc0NzcyA9IGZ1bmN0aW9uIGlzQ3NzKGZpbGUpIHtcbiAgcmV0dXJuICgvXFwuY3NzJC8udGVzdChmaWxlKVxuICApO1xufTtcblxudmFyIHN0eWxlc0FzU3RyaW5nID0gZXhwb3J0cy5zdHlsZXNBc1N0cmluZyA9IGZ1bmN0aW9uIHN0eWxlc0FzU3RyaW5nKHN0eWxlc2hlZXRzLCBvdXRwdXRQYXRoKSB7XG4gIGlmICghb3V0cHV0UGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gYG91dHB1dFBhdGhgIHdhcyBwcm92aWRlZCBhcyBhbiBvcHRpb24gdG8gYGZsdXNoQ2h1bmtzYC4gXFxuICAgICAgUGxlYXNlIHByb3ZpZGUgb25lIHNvIHN0eWxlc2hlZXRzIGNhbiBiZSByZWFkIGZyb20gdGhlXFxuICAgICAgZmlsZSBzeXN0ZW0gc2luY2UgeW91XFwncmUgZW1iZWRkaW5nIHRoZSBjc3MgYXMgYSBzdHJpbmcuJyk7XG4gIH1cblxuICB2YXIgcGF0aCA9IG91dHB1dFBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICByZXR1cm4gc3R5bGVzaGVldHMubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgdmFyIGZpbGVQYXRoID0gcGF0aCArICcvJyArIGZpbGU7XG4gICAgcmV0dXJuIF9mczIuZGVmYXVsdC5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGY4Jyk7XG4gIH0pLmpvaW4oJ1xcbicpLnJlcGxhY2UoL1xcL1xcKiMgc291cmNlTWFwcGluZ1VSTD0uK1xcKlxcLy9nLCAnJyk7IC8vIGhpZGUgcHJvZCBzb3VyY2VtYXAgZXJyXG59O1xuXG52YXIgY3JlYXRlQ3NzSGFzaCA9IGV4cG9ydHMuY3JlYXRlQ3NzSGFzaCA9IGZ1bmN0aW9uIGNyZWF0ZUNzc0hhc2goX3JlZikge1xuICB2YXIgYXNzZXRzQnlDaHVua05hbWUgPSBfcmVmLmFzc2V0c0J5Q2h1bmtOYW1lLFxuICAgICAgcHVibGljUGF0aCA9IF9yZWYucHVibGljUGF0aDtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGFzc2V0c0J5Q2h1bmtOYW1lKS5yZWR1Y2UoZnVuY3Rpb24gKGhhc2gsIG5hbWUpIHtcbiAgICBpZiAoIWFzc2V0c0J5Q2h1bmtOYW1lW25hbWVdIHx8ICFhc3NldHNCeUNodW5rTmFtZVtuYW1lXS5maW5kKSByZXR1cm4gaGFzaDtcbiAgICB2YXIgZmlsZSA9IGFzc2V0c0J5Q2h1bmtOYW1lW25hbWVdLmZpbmQoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHJldHVybiBmaWxlLmVuZHNXaXRoKCcuY3NzJyk7XG4gICAgfSk7XG4gICAgaWYgKGZpbGUpIGhhc2hbbmFtZV0gPSAnJyArIHB1YmxpY1BhdGggKyBmaWxlO1xuICAgIHJldHVybiBoYXNoO1xuICB9LCB7fSk7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjayktZmx1c2gtY2h1bmtzL2Rpc3QvY3JlYXRlQXBpV2l0aENzcy5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiZnNcIlxuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24uanMnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0LmpzJztcbmltcG9ydCBCbG9nUG9zdCBmcm9tICcuL0Jsb2dQb3N0JztcblxuaW1wb3J0ICcuL2FwcC5zdHlsJztcblxuLyoqXG4gKiBUaGUgYEFwcGAgY29tcG9uZW50IGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgdGhlIHJlYWN0IGFwcC5cbiAqIEl0IGlzIHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgYXMgd2VsbCBhcyBvbiB0aGUgc2VydmVyLlxuICpcbiAqIFlvdSBjYW4gc3RhcnQgZGV2ZWxvcGluZyB5b3VyIHJlYWN0IGFwcCBoZXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aDE+VEhJUyBJUyBBTiBBUFA8L2gxPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gLz5cbiAgICAgICAgICAgICAgICA8QmxvZ1Bvc3QgIC8+XG4gICAgICAgICAgICAgICAgPEJsb2dQb3N0ICAgLz5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8TGlzdCAvPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9BcHAuanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgJy4vYXBwLnN0eWwnO1xuXG4vKipcbiAqIEEgTGlzdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT5jb25zb2xlLmxvZygneWFjbGlja2VkbWUnKX0+XG4gICAgICAgICAgICBDbGljayBtZSFcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9CdXR0b24uanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gJy4vTGlzdEl0ZW0uanMnO1xuaW1wb3J0IFByb2R1Y3RJbmZvIGZyb20gJy4vUHJvZHVjdEluZm8uanMnO1xuXG5pbXBvcnQgJy4vYXBwLnN0eWwnO1xuXG4vKipcbiAqIEEgTGlzdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBidW5jaE9mUHJvZHVjdHMgPSBbXTtcbiAgICAgICAgY29uc3QgdGVtcGxhdGl6ZWRQcm9wcyA9IFtcIm5hbWVcIiwgXCJkZXNjcmlwdGlvblwiLCBcInByaWNlXCJdO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8MTAwMDsgaSsrKSB7XG4gICAgICAgICAgICBidW5jaE9mUHJvZHVjdHMucHVzaCg8UHJvZHVjdEluZm8ga2V5PXtpfSBuYW1lPXtgVGhpbmcgJHtpfWB9IGRlc2NyaXB0aW9uPVwiVGhpcyBwcm9kdWN0IGlzIGF3ZXNvbWUhXCIgcHJpY2U9e2kgKiAxMH0gbm9uVGVtcGxhdGl6ZWQ9XCJUSElTIFRFWFQgU0hPVUxEIE5FVkVSIENIQU5HRVwiIC8+KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGgxPkhlcmUncyBteSBsaXN0PC9oMT5cbiAgICAgICAgICAgICAge2J1bmNoT2ZQcm9kdWN0c31cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvTGlzdC5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCAnLi9hcHAuc3R5bCc7XG5cbi8qKlxuICogQSBMaXN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGk+SEFIQUhBPC9saT5cbiAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuICB9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9MaXN0SXRlbS5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vYXBwLnN0eWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9kdWN0SW5mbyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHsgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxwPjxzdHJvbmc+UHJvZHVjdCBOYW1lOiA8L3N0cm9uZz57dGhpcy5wcm9wcy5uYW1lfTwvcD5cbiAgICAgICAgPHA+PHN0cm9uZz5Qcm9kdWN0IERlc2NyaXB0aW9uOiA8L3N0cm9uZz57dGhpcy5wcm9wcy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgIDxwPjxzdHJvbmc+UHJpY2U6IDwvc3Ryb25nPiR7dGhpcy5wcm9wcy5wcmljZX08L3A+XG4gICAgICAgIDxwPjxzdHJvbmc+Tm9uLVRlbXBsYXRpemVkIFByb3A6IDwvc3Ryb25nPnt0aGlzLnByb3BzLm5vblRlbXBsYXRpemVkfTwvcD4gICBcbiAgICAgICAgPGhyIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9Qcm9kdWN0SW5mby5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmxvZ0NvbnRlbnQgZnJvbSAnLi9CbG9nQ29udGVudC5qcyc7XG5cbmltcG9ydCAnLi9hcHAuc3R5bCc7XG5cbi8qKlxuICogQSBMaXN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2dQb3N0IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMT5UaGlzIGlzIGEgZ3JlYXQgYmxvZyBwb3N0ITwvaDE+XG4gICAgICAgICAgICAgIDxoMj5Ub2RheSBpcyB7dGhpcy5wcm9wcy5kYXl9LjwvaDI+XG4gICAgICAgICAgICAgIDxCbG9nQ29udGVudCAvPlxuICAgICAgICAgICAgICA8cD57dGhpcy5wcm9wcy50aGluZ308L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvQmxvZ1Bvc3QuanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgJy4vYXBwLnN0eWwnO1xuXG4vKipcbiAqIEEgTGlzdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbG9nQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBEZWFyIERpYXJ5LFxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIFRvZGF5IEkgdHJpZWQgdG8gdW5kZXJzdGFuZCBSZWFjdCAxNiBzb3VyY2UgY29kZS4gSXQgd2FzIGEgcm9sbGVyY29hc3RlciBvZiBlbW90aW9uLiBOb3cgSSdtIG1ha2luZyB0aGUgbmV4dCBiaWcgd2ViIGFwcC4gRXZlcnlvbmUgd2lsbCBsb3ZlIGl0LlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvQmxvZ0NvbnRlbnQuanMiXSwic291cmNlUm9vdCI6IiJ9